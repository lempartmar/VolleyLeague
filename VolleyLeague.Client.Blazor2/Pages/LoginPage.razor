@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Client.Blazor2.Authentication
@using VolleyLeague.Client.Blazor2.Services
@using VolleyLeague.Client.Blazor2.Shared.Dtos
@using static VolleyLeague.Client.Blazor2.Services.AccountService
@using System.Net.Http.Headers
@inject AuthenticationStateProvider authStateProvider
@inject IUserAccount AccountService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject HttpClient Http

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="card-header">Login An Account</div>
                <div class="card-body">

                    @* Email Address *@
                    <div class="form-group mb-3">
                        <input @bind="User.Email"
                               class="form-control"
                               type="email"
                               placeholder="Email Address">
                        </input>
                    </div>

                    @* Password *@
                    <div class="form-group">
                        <div class="input-group mb-3">
                             <input type="password" class="form-control"
                                   @bind="User.Password"
                                   placeholder="Password"
                                   aria-label="Password"
                                   aria-describedby="Password">
                        </div>
                    </div>

                </div>
                <div class="card-footer">
                    <button class="btn btn-primary float-end"
                            type="submit">
                        Login
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

 @code {
    public LoginDto User { get; set; } = new();

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    async Task HandleLogin()
    {
        var result = await AccountService.LoginAccount(User);

        if (result != null)
        {
            await localStorage.SetItemAsync("authToken", result);
            ((CustomAuthenticationStateProvider)authStateProvider).NotifyUserAuthentication(result!);
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", result);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(result);
            NavigationManager.NavigateTo("/", forceLoad: true);

        }
        // if (flag)
        // {
        //     string customMessage = $"{message}{Environment.NewLine}{token}";
        //     await js.InvokeVoidAsync("alert", customMessage);
        //     User = new();

        //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        //     await customAuthStateProvider.UpdateAuthenticationState(token);
        //     NavManager.NavigateTo("/", forceLoad: true);
        // }

        // await js.InvokeVoidAsync("alert", message);
        // return;
    }
}