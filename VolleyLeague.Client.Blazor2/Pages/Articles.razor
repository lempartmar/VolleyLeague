@page "/articles"
@using VolleyLeague.Entities.Dtos.Discussion
@inject HttpClient Http

<PageTitle>Articles</PageTitle>

<h1 style="border-bottom: 1px solid #ccc; padding-bottom: 10px;">Aktualności</h1>

@if (_articles != null && _articles.Any())
{
    <div class="page-wrapper">
        <div class="blog-top clearfix">
            <h4 class="pull-left">Aktualności</h4>
        </div><!-- end blog-top -->

        <div class="blog-list clearfix">
            @foreach (var article in _articles)
            {
                <div>@article.Title</div>
                <hr class="invis">
            }
        </div><!-- end blog-list -->

        <div class="pagination-controls">
            @if (_currentPage > 1)
            {
                <button @onclick="LoadPreviousPage">Previous Page</button>
            }

            <span>Page @_currentPage</span>

            @if (_articles.Count() >= _articlesPerPage)
            {
                <button @onclick="LoadNextPage">Next Page</button>
            }
        </div>
    </div>

    <!-- end page-wrapper -->
}
else
{
    <p>Nie znaleziono artykułów.</p>
}

@code {
    private IEnumerable<ArticleDto> _articles;
    private int _currentPage = 1;
    private int _articlesPerPage = 7;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticles();
    }

    private async Task LoadArticles()
    {
        var result = await Http.GetAsync($"/api/Article/GetArticlesPerPage/{_currentPage}");
        if (result.IsSuccessStatusCode)
        {
            var articlesFromApi = await result.Content.ReadFromJsonAsync<IEnumerable<ArticleDto>>();
            _articles = articlesFromApi;
        }
    }

    private async Task LoadNextPage()
    {
        _currentPage++;
        await LoadArticles();
    }

    private async Task LoadPreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadArticles();
        }
    }
}
