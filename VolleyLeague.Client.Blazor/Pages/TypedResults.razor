@page "/typedResults"
@inject ITypedResultService typedResultService
@inject IMatchService matchService
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Entities.Dtos
@using VolleyLeague.Entities.Dtos.Teams
@using VolleyLeague.Entities.Dtos.Users

<section class="rules_section">
    <div class="container">
        <h2>Zasady</h2>
        <ol>
            <li>Obstawiamy spotkania ze wszystkich lig</li>
            <li>Za idealne wytypowanie wyniku: 3 pkt, za poprawne wytypowanie zwycięzcy: 1pkt, w przeciwnym przypadku: 0 pkt.</li>
            <li>W przypadku takiej samej ilości punktów o wyższym miejscu decyduje ilość idealnie wytypowanych wyników.</li>
            <li>Koniec przyjmowania zgłoszeń następuje o północy, na dzień przed rozpoczęciem kolejki.</li>
        </ol>
    </div>
</section>

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <section class="category_section">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="mobile">
                        <div class="article_title">
                            <h2>Typermania</h2>
                        </div>
                        <div class="card m-2 p-2">
                            <EditForm Model="Filter">
                                <div class="form-group btn-group">
                                    <label for="seasonSelect" class="btn btn-default btn-label">SEZON:</label>
                                    <Select value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="btn btn-default dropdown-toggle">
                                        @foreach (var season in Filter.SeasonList.OrderByDescending(s => s.Id))
                                        {
                                            <option value="@season.Id">@season.Name</option>
                                        }
                                    </Select>
                                </div>
                            </EditForm>
                        </div>

                        @if (resultsLoading)
                        {
                            <div class="d-flex justify-content-center">
                                <div class="spinner-border" role="status">
                                    <span class="sr-only">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(resultsErrorMessage))
                        {
                            <div class="alert alert-danger">
                                @resultsErrorMessage
                            </div>
                        }
                        else if (TypedUserList.Count == 0)
                        {
                            <div class="alert alert-info" role="alert">
                                Brak wyników do wyświetlenia dla wybranego sezonu.
                            </div>
                        }
                        else
                        {
                            <table class="table" style="color: black">
                                <thead>
                                    <tr>
                                        <th>LP</th>
                                        <th>Głosujący</th>
                                        <th>Poprawnych wyników</th>
                                        <th>Wytypowanych zwycięzców</th>
                                        <th>Punkty</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (var i = 0; i < TypedUserList.Count; i++)
                                    {
                                        var user = TypedUserList[i];
                                        <tr>
                                            <td>@(i + 1)</td>
                                            <td>@user.FirstName @user.LastName</td>
                                            <td>@user.PerfectResultsCount</td>
                                            <td>@user.CorrectResultsCount</td>
                                            <td>@user.TemporaryVote</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<style>
    .rules_section {
        margin-top: 20px;
        margin-bottom: 20px;
    }

        .rules_section ol {
            padding-left: 20px;
        }

    .btn-label {
        background: none;
        border: none;
        padding: 6px 12px;
        font-weight: bold;
        color: #555;
        text-align: left;
    }

    .dropdown-toggle {
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }

    .card {
        margin-bottom: 50px;
    }

    .btn.btn-default.dropdown-toggle {
        background: #e5e7eb;
        font-size: 12px;
        color: black;
        font-weight: bold;
        text-align: left;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }
</style>

@code {
    private bool pageReady = false;
    private bool resultsLoading = false;
    private string resultsErrorMessage = "";
    private List<TypedUserDto> TypedUserList = new List<TypedUserDto>();
    private ScheduleFilter Filter = new ScheduleFilter();

    private class ScheduleFilter
    {
        public int SeasonId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();

        public ScheduleFilter()
        {
            SeasonId = 37; // Assume a default or current season
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialDataAsync();
        await ApplyFilter();
        pageReady = true;
    }

    private async Task LoadInitialDataAsync()
    {
        Filter.SeasonList = (await matchService.GetSeasons()).OrderByDescending(s => s.Id).ToList();
    }

    private async Task ApplyFilter()
    {
        resultsLoading = true;
        TypedUserList = await typedResultService.GetTypedUserDto(Filter.SeasonId);
        resultsLoading = false;

        if (TypedUserList == null || TypedUserList.Count == 0)
        {
            resultsErrorMessage = "Brak danych dla wybranych kryteriów.";
        }
        else
        {
            resultsErrorMessage = string.Empty;
        }
    }

    private EventCallback<ChangeEventArgs> OnSeasonChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });
}
