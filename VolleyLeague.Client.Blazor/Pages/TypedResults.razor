@page "/typedResults"
@inject ITypedResultService typedResultService
@inject IMatchService matchService
@inject IAdminDefinedCodeService adminDefinedCodeService
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams

<link href="typedresults.css" rel="stylesheet">

@if (!pageReady)
{
    <section id="loading_section" class="loading_section" style="margin-top: 150px">
        <div class="container">
            <div class="table-spinner"></div>
        </div>
    </section>
}
else
{
    <div class="rts-point-table-section section-gap">
        <div class="container">
            <section class="rules_section">
                <div class="container">
                    <h2 class="margin-bottom-xs">Zasady</h2>
                    <ol>
                        <li>Obstawiamy spotkania ze wszystkich lig</li>
                        <li>Za idealne wytypowanie wyniku: 3 pkt, za poprawne wytypowanie zwycięzcy: 1 pkt, w przeciwnym przypadku: 0 pkt.</li>
                        <li>W przypadku takiej samej ilości punktów o wyższym miejscu decyduje ilość idealnie wytypowanych wyników.</li>
                        <li>Koniec przyjmowania zgłoszeń następuje o północy, na dzień przed rozpoczęciem kolejki.</li>
                    </ol>
                </div>
            </section>
            <div class="table-area table-full">
                <form class="checkout-form">
                    <div class="row">
                        <div class="col-xl-3 col-md-3">
                            <div class="form-group">
                                <label for="seasonSelect" class="form-label">SEZON:</label>
                                <select id="seasonSelect" value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="form-select">
                                    @foreach (var season in Filter.SeasonList.OrderByDescending(s => s.Id))
                                    {
                                        <option value="@season.Id">@season.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </form>

                @if (resultsLoading)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(resultsErrorMessage))
                {
                    <div class="alert alert-danger standings-alert-danger">
                        @resultsErrorMessage
                    </div>
                }
                else if (TypedUserList.Count == 0)
                {
                    <div class="alert alert-info standings-alert-info" role="alert">
                        Brak wyników do wyświetlenia dla wybranego sezonu.
                    </div>
                }
                else
                {
                    <table class="table table-table-bordered">
                        <thead class="table-thead table-thead-dark">
                            <tr class="table-head-tr">
                                <th scope="col">LP</th>
                                <th scope="col">Głosujący</th>
                                <th scope="col">Poprawnych wyników</th>
                                <th scope="col">Wytypowanych zwycięzców</th>
                                <th scope="col">Punkty</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < TypedUserList.Count; i++)
                            {
                                var user = TypedUserList[i];
                                <tr>
                                    <td><span class="position-number">@(i + 1)</span></td>
                                    <td>
                                        <div class="player-name-area">
                                            <h4 class="player-name">@user.FirstName @user.LastName</h4>
                                        </div>
                                    </td>
                                    <td><span class="result-count">@user.PerfectResultsCount</span></td>
                                    <td><span class="result-count">@user.CorrectResultsCount</span></td>
                                    <td><span class="points-count">@user.TemporaryVote</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool pageReady = false;
    private bool resultsLoading = false;
    private string resultsErrorMessage = "";
    private List<TypedUserDto> TypedUserList = new List<TypedUserDto>();
    private ScheduleFilter Filter;



    private class ScheduleFilter
    {
        public int SeasonId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();

        public ScheduleFilter(int startingSeasonId)
        {
            SeasonId = startingSeasonId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int startingSeasonId = int.Parse(await adminDefinedCodeService.GetValueByKey("seasonId-for-main-page"));
        Filter = new ScheduleFilter(startingSeasonId);
        await LoadInitialDataAsync();
        await ApplyFilter();
        pageReady = true;
    }

    private async Task LoadInitialDataAsync()
    {
        Filter.SeasonList = (await matchService.GetSeasons()).OrderByDescending(s => s.Id).ToList();
    }

    private async Task ApplyFilter()
    {
        resultsLoading = true;
        TypedUserList = await typedResultService.GetTypedUserDto(Filter.SeasonId);
        resultsLoading = false;

        if (TypedUserList == null || TypedUserList.Count == 0)
        {
            resultsErrorMessage = "Brak danych dla wybranych kryteriów.";
        }
        else
        {
            resultsErrorMessage = string.Empty;
        }
    }

    private EventCallback<ChangeEventArgs> OnSeasonChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });
}
