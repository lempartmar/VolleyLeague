@page "/referees"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams
@inject HttpClient Http
@inject IMatchService matchService

@attribute [Authorize(Roles = "Admin")]

@if (!_isPageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Zarządzanie Sędziami</h2>
                <p>Wybierz sędziego z listy aktualnych sędziów lub dodaj nowego sędziego z listy potencjalnych sędziów.</p>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5>Aktualni Sędziowie</h5>
                    <ul class="list-group">
                        @if (_referees == null || !_referees.Any())
                        {
                            <li class="list-group-item">Ładowanie sędziów...</li>
                        }
                        else
                        {
                            @foreach (PlayerSummaryDto referee in _referees)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@referee.Name</span>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveReferee(referee.Id)">Usuń</button>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <h5>Dodaj Nowego Sędziego</h5>
                    <select @onchange="OnPotentialRefereeSelected" class="form-control mb-3" id="potentialReferees">
                        @if (_potentialReferees == null)
                        {
                            <option value="null" disabled>Ładowanie potencjalnych sędziów...</option>
                        }
                        else
                        {
                            <option value="null" selected disabled>Wybierz nowego sędziego</option>
                            @foreach (PlayerSummaryDto referee in _potentialReferees)
                            {
                                <option value="@referee.Id">@referee.Name</option>
                            }
                        }
                    </select>
                    <button class="btn btn-primary btn-sm" @onclick="AddSelectedReferee" disabled="@(!_isRefereeSelected)">Dodaj</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    .account-main {
        padding: 20px;
        background-color: #f9f9f9;
    }

    .section-title h2 {
        margin-bottom: 20px;
    }

    .login-form .card {
        margin-bottom: 20px;
    }

    .login-form .card-body {
        padding: 30px;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .text-center {
        text-align: center;
    }

    .form-label {
        display: block;
        width: 100%;
    }

    .list-group-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        height: 40px;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
    }
</style>

@code {
    private IEnumerable<PlayerSummaryDto> _referees = Enumerable.Empty<PlayerSummaryDto>();
    private IEnumerable<PlayerSummaryDto> _potentialReferees = Enumerable.Empty<PlayerSummaryDto>();
    private int? selectedRefereeId = null;
    private bool _isRefereeSelected => selectedRefereeId.HasValue;
    private bool _isPageReady = false;

    protected override async Task OnInitializedAsync()
    {
        _referees = await LoadReferees();
        _potentialReferees = await LoadPotentialReferees();
        _isPageReady = true;
    }

    private async Task<List<PlayerSummaryDto>> LoadReferees()
    {
        var referees = await matchService.GetReferees();
        return referees ?? new List<PlayerSummaryDto>();
    }

    private async Task<List<PlayerSummaryDto>> LoadPotentialReferees()
    {
        var potentialReferees = await matchService.GetPotentialReferees();
        return potentialReferees ?? new List<PlayerSummaryDto>();
    }

    private void OnPotentialRefereeSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            selectedRefereeId = id;
        }
        else
        {
            selectedRefereeId = null;
        }
    }

    private async Task AddSelectedReferee()
    {
        if (_isRefereeSelected)
        {
            await matchService.AddReferee(selectedRefereeId.Value);
            _referees = await LoadReferees();
            _potentialReferees = await LoadPotentialReferees();
            selectedRefereeId = null;
        }
    }

    private async Task RemoveReferee(int refereeId)
    {
        await matchService.RemoveReferee(refereeId);
        _referees = await LoadReferees();
    }
}
