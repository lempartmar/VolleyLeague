@page "/team-result/{Id:int}"
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Matches
@using VolleyLeague.Shared.Dtos.Teams
@inject ITeamService teamService
@inject IMatchService matchService

<head>
    <link rel="stylesheet" href="/assets/css/custom-team-result.css" />
</head>

<section class="rts-point-table-section section-gap">
    <div class="container">
        <div class="table-area table-full text-center">
            @if (TeamData != null)
            {
                <div class="team-header">
                    <h2>@TeamData.Name</h2>
                </div>
                <div class="p-2 card mt-4 mb-5 table-responsive-lg">
                    <div class="card-header">
                        Historia meczów
                    </div>
                    <div class="col-xl-3 col-md-3">
                        <div class="form-group" style="display: flex;flex-direction: column;justify-content: flex-start;margin-top: 25px;">
                        <label for="seasonSelect" class="form-label" style="margin-right: auto;">Sezon:</label>
                        <select id="seasonSelect" value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="form-select">
                            @foreach (var season in Filter.SeasonList)
                            {
                                <option value="@season.Id">@season.Name</option>
                            }
                        </select>
                    </div>
                    </div>
                    <table class="table">
                        <thead class="thead-dark">
                            <tr>
                                <th>Termin</th>
                                <th>Gospodarz</th>
                                <th>Wynik</th>
                                <th>Gość</th>
                                <th>Miejsce</th>
                                <th>Kolejka</th>
                                <th>Sędzia</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Games != null)
                            {
                                @foreach (var game in Games)
                                {
                                    <tr>
                                        <td>
                                            <NavLink href=@{"/match/" + game.Id}>@game.Schedule</NavLink>
                                        </td>
                                        <td>
                                            <NavLink href=@{"/team/" + game.HomeTeam.Id}>@game.HomeTeam.Name</NavLink>
                                        </td>
                                        <td>@game.Team1Score : @game.Team2Score</td>
                                        <td>
                                            <NavLink href=@{"/team/" + game.GuestTeam.Id}>@game.GuestTeam.Name</NavLink>
                                        </td>
                                        <td>@game.VenueName</td>
                                        <td>@game.RoundName</td>
                                        <td>
                                            <NavLink href=@{"/user/" + game.Referee.Id}>@game.Referee.FirstName @game.Referee.LastName</NavLink>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }
                else
                {
                    <LoadingIcon></LoadingIcon>
                }
            }
        </div>
    </div>
</section>

@code {
    public string ErrorMessage { get; set; } = "";

    private ScheduleFilter Filter = new ScheduleFilter();

    private class ScheduleFilter
    {
        public int SeasonId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();
    }

    [Parameter]
    public int Id { get; set; }

    public TeamDto? TeamData { get; set; }

    public List<MatchSummaryDto>? Games { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TeamData = await GetTeamProfile();
        Filter.SeasonList = (await matchService.GetSeasons()).OrderByDescending(s => s.Id).ToList();
        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        Games = await matchService.GetMatches(Filter.SeasonId, Id);
    }

    private async Task OnSeasonChanged(ChangeEventArgs e)
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    }

    public async Task<TeamDto?> GetTeamProfile()
    {
        var teamResponse = await teamService.GetTeam(Id);
        return teamResponse;
    }
}
