@page "/handleseason"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Matches
@using VolleyLeague.Shared.Dtos.Teams
@inject ISeasonService seasonService

@attribute [Authorize(Roles = "Admin")]

<head>
    <link href="/assets/css/custom-handle-season.css" rel="stylesheet" />
</head>

@if (!pageReady)
{
    <section id="loading_section" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Zarządzanie Sezonami</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    <h3>Dodaj nowy sezon</h3>
                    <EditForm Model="@newSeason" OnValidSubmit="CreateSeason" class="edit-form">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-floating mb-4">
                            <InputText id="newSeasonName" class="form-control" @bind-Value="newSeason.Name" placeholder="Nazwa sezonu" />
                            <label for="newSeasonName">Nazwa sezonu</label>
                        </div>
                        <button type="submit" class="btn btn-primary btn-sm">Dodaj</button>
                    </EditForm>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <h3>Lista sezonów</h3>
                    @if (!string.IsNullOrEmpty(seasonsErrorMessage))
                    {
                        <div class="alert alert-danger">
                            @seasonsErrorMessage
                        </div>
                    }
                    @if (seasonsLoading)
                    {
                        <div class="d-flex justify-content-center">
                            <div id="spinner"></div>
                        </div>
                    }
                    else if (_seasons != null && _seasons.Any())
                    {
                        <ul class="list-group">
                            @foreach (var season in PaginatedSeasons)
                            {
                                <li class="list-group-item list-group-item-season">
                                    <div class="season-info">
                                        <span>@season.Name</span>
                                        <span>
                                            <button class="btn btn-primary btn-sm me-2" @onclick="() => ToggleEditSeason(season)">Edytuj</button>
                                            <button class="btn btn-danger btn-sm me-2" @onclick="() => DeleteSeason(season.Id)">Usuń</button>
                                            <button class="btn btn-info btn-sm" @onclick="() => ShowRounds(season.Id)">Kolejki</button>
                                        </span>
                                    </div>
                                    @if (_editingSeasonId == season.Id)
                                    {
                                        <div class="card card-body mt-2">
                                            <EditForm Model="@season" OnValidSubmit="@(() => SaveSeason(season))">
                                                <div class="form-floating mb-4">
                                                    <InputText id="name" class="form-control" @bind-Value="season.Name" placeholder="Nazwa sezonu" />
                                                    <label for="name">Nazwa sezonu</label>
                                                </div>
                                                <div class="d-flex justify-content-end">
                                                    <button type="submit" class="btn btn-success btn-sm me-2">Zapisz</button>
                                                    <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit()">Anuluj</button>
                                                </div>
                                            </EditForm>
                                        </div>
                                    }
                                    @if (selectedSeasonId == season.Id && rounds != null)
                                    {
                                        <div class="card card-body mt-2">
                                            <h4>Kolejki sezonu</h4>
                                            <EditForm Model="@newRound" OnValidSubmit="CreateRound" class="edit-form">
                                                <DataAnnotationsValidator />
                                                <ValidationSummary />
                                                <div class="form-floating mb-4">
                                                    <InputText id="newRoundName" class="form-control" @bind-Value="newRound.Name" placeholder="Nazwa kolejki" />
                                                    <label for="newRoundName">Nazwa kolejki</label>
                                                </div>
                                                <button type="submit" class="btn btn-primary btn-sm">Dodaj Rundę</button>
                                            </EditForm>
                                            <ul class="list-group mt-2">
                                                @foreach (var round in rounds)
                                                {
                                                    <li class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <span class="mr-5">@round.Name</span>
                                                            <span>
                                                                <button class="btn btn-primary btn-sm me-2 ms-5" @onclick="() => ToggleEditRound(round)">Edytuj</button>
                                                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteRound(round.Id)">Usuń</button>
                                                            </span>
                                                        </div>
                                                        @if (_editingRoundId == round.Id)
                                                        {
                                                            <div class="card card-body mt-2">
                                                                <EditForm Model="@round" OnValidSubmit="@(() => SaveRound(round))">
                                                                    <div class="form-floating mb-4">
                                                                        <InputText id="roundName" class="form-control" @bind-Value="round.Name" placeholder="Nazwa rundy" />
                                                                        <label for="roundName">Nazwa rundy</label>
                                                                    </div>
                                                                    <div class="d-flex justify-content-end">
                                                                        <button type="submit" class="btn btn-success btn-sm me-2">Zapisz</button>
                                                                        <button class="btn btn-secondary btn-sm" @onclick="() => CancelEditRound()">Anuluj</button>
                                                                    </div>
                                                                </EditForm>
                                                            </div>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </li>
                            }
                        </ul>
                        <div class="d-flex justify-content-between mt-2">
                            <button class="btn btn-outline-secondary btn-sm" @onclick="PreviousPage" disabled="@(_currentPage == 1)">Poprzednia</button>
                            <span>Strona @_currentPage z @_totalPages</span>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Następna</button>
                        </div>
                    }
                    else
                    {
                        <p>Brak dostępnych sezonów.</p>
                    }
                </div>
            </div>
        </div>
    </div>
}



@code {
    private bool pageReady = false;
    private bool seasonsLoading = false;
    private string seasonsErrorMessage = "";
    private List<SeasonDto> _seasons;
    private int? _editingSeasonId;
    private int? _editingRoundId;
    private int? selectedSeasonId;
    private SeasonDto newSeason = new SeasonDto();
    private RoundDto newRound = new RoundDto();
    private List<RoundDto> rounds;

    private const int PageSize = 7;
    private int _currentPage = 1;
    private int _totalPages => (_seasons.Count + PageSize - 1) / PageSize;

    private IEnumerable<SeasonDto> PaginatedSeasons => _seasons.Skip((_currentPage - 1) * PageSize).Take(PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadSeasons();
        pageReady = true;
    }

    private async Task LoadSeasons()
    {
        seasonsLoading = true;
        try
        {
            _seasons = await seasonService.GetSeasons();
            _seasons = _seasons.OrderByDescending(s => s.Id).ToList();
            seasonsErrorMessage = "";
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas ładowania sezonów: {ex.Message}";
        }
        seasonsLoading = false;
    }

    private async Task CreateSeason()
    {
        try
        {
            await seasonService.CreateSeason(newSeason);
            newSeason = new SeasonDto();
            await LoadSeasons();
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas tworzenia sezonu: {ex.Message}";
        }
    }

    private async Task DeleteSeason(int seasonId)
    {
        try
        {
            var response = await seasonService.DeleteSeason(seasonId);
            if (!response.IsSuccessStatusCode)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                seasonsErrorMessage = $"Błąd podczas usuwania sezonu: {errorMessage}";
            }
            else
            {
                await LoadSeasons();
            }
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas usuwania sezonu: {ex.Message}";
        }
    }

    private void ToggleEditSeason(SeasonDto season)
    {
        _editingSeasonId = _editingSeasonId == season.Id ? null : season.Id;
    }

    private async Task SaveSeason(SeasonDto season)
    {
        try
        {
            await seasonService.UpdateSeason(season);
            _editingSeasonId = null;
            await LoadSeasons();
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas zapisywania sezonu: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        _editingSeasonId = null;
    }

    private void CancelEditRound()
    {
        _editingRoundId = null;
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
        }
    }

    private async Task ShowRounds(int seasonId)
    {
        selectedSeasonId = seasonId;
        rounds = await seasonService.GetRounds(seasonId);
    }

    private async Task CreateRound()
    {
        try
        {
            newRound.SeasonId = selectedSeasonId.Value;
            await seasonService.CreateRound(newRound);
            newRound = new RoundDto();
            await ShowRounds(selectedSeasonId.Value);
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas tworzenia rundy: {ex.Message}";
        }
    }

    private void ToggleEditRound(RoundDto round)
    {
        _editingRoundId = _editingRoundId == round.Id ? null : round.Id;
    }

    private async Task SaveRound(RoundDto round)
    {
        try
        {
            await seasonService.UpdateRound(round);
            _editingRoundId = null;
            await ShowRounds(selectedSeasonId.Value);
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas zapisywania rundy: {ex.Message}";
        }
    }

    private async Task DeleteRound(int roundId)
    {
        try
        {
            var response = await seasonService.DeleteRound(roundId);
            if (!response.IsSuccessStatusCode)
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                seasonsErrorMessage = $"Błąd podczas usuwania rundy: {errorMessage}";
            }
            else
            {
                await ShowRounds(selectedSeasonId.Value);
            }
        }
        catch (Exception ex)
        {
            seasonsErrorMessage = $"Błąd podczas usuwania rundy: {ex.Message}";
        }
    }
}
