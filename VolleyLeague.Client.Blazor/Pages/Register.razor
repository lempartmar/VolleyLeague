@page "/register"
@using System.ComponentModel.DataAnnotations
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Entities.Dtos.Teams
@using VolleyLeague.Entities.Dtos.Users
@inject IUserService UserService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="container login">
    <div class="row justify-content-center">
        <div class="col-md-12 mt-3">
            <div class="text-center">
                <h1>Rejestracja</h1>
            </div>
            <div class="entity_content">
                @if (!IsSubmitted)
                {
                    <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="card">
                            <div class="card-body login">

                                <div class="form-group mb-3">
                                    <label for="FirstName" class="control-label">Imię:</label>
                                    <InputText class="form-control" id="FirstName" @bind-Value="registerModel.FirstName" />
                                    <ValidationMessage class="text-danger" For="@(() => registerModel.FirstName)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="LastName" class="control-label">Nazwisko:</label>
                                    <InputText class="form-control" id="LastName" @bind-Value="registerModel.LastName" />
                                    <ValidationMessage class="text-danger" For="@(() => registerModel.LastName)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="Email" class="control-label">Adres e-mail:</label>
                                    <InputText class="form-control" id="Email" @bind-Value="registerModel.Email" />
                                    <ValidationMessage class="text-danger" For="@(() => registerModel.Email)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="Password" class="control-label">Hasło:</label>
                                    <InputText class="form-control" id="Password" type="password" @bind-Value="registerModel.Password" @oninput="ValidatePassword" />
                                    <ValidationMessage class="text-danger" For="@(() => registerModel.Password)" />
                                    <ul class="password-requirements mt-2">
                                        <li class="@GetValidationClass(PasswordLengthValid)">Co najmniej 8 znaków</li>
                                        <li class="@GetValidationClass(PasswordUppercaseValid)">Zawiera wielkie litery</li>
                                        <li class="@GetValidationClass(PasswordLowercaseValid)">Zawiera małe litery</li>
                                        <li class="@GetValidationClass(PasswordNumberValid)">Zawiera cyfry</li>
                                        <li class="@GetValidationClass(PasswordPunctuationValid)">Zawiera znaki interpunkcyjne</li>
                                    </ul>
                                </div>

                                <div class="form-group mb-3">
                                    <label for="ConfirmPassword" class="control-label">Powtórz hasło:</label>
                                    <InputText class="form-control" id="ConfirmPassword" type="password" @bind-Value="registerModel.ConfirmPassword" @oninput="ValidateConfirmPassword" />
                                    <ValidationMessage class="text-danger" For="@(() => registerModel.ConfirmPassword)" />
                                    @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                    {
                                        <div class="text-danger mt-2">@confirmPasswordValidationMessage</div>
                                    }
                                </div>

                            </div>
                            <div class="card-footer text-center">
                                <button class="btn" style="background-color: #7d7d7d; color: white;" type="submit">Zarejestruj</button>
                            </div>
                        </div>
                    </EditForm>
                }
                else
                {
                    <h3>Zarejestrowano pomyślnie!</h3>
                    <p><a href="/login">Zaloguj się</a></p>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .password-requirements {
        list-style-type: none;
        padding: 0;
    }

        .password-requirements li {
            display: flex;
            align-items: center;
            margin-top: 0.5em; /* Dodano margines górny */
        }

            .password-requirements li.valid {
                color: green;
            }

            .password-requirements li::before {
                content: '✘';
                margin-right: 8px;
                font-size: 1.2em;
                display: inline-block;
            }

            .password-requirements li.valid::before {
                content: '✔';
                color: green;
            }
</style>

@code {
    private RegisterDto registerModel = new RegisterDto();

    private bool IsLoading = false;

    private bool IsSubmitted = false;

    private bool ShowErrorMessage = false;

    private string ErrorMessage = "";

    private string confirmPasswordValidationMessage = "";

    private List<PositionDto> Positions = new List<PositionDto>();

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    // Password validation states
    private bool PasswordLengthValid = false;
    private bool PasswordUppercaseValid = false;
    private bool PasswordLowercaseValid = false;
    private bool PasswordNumberValid = false;
    private bool PasswordPunctuationValid = false;

    protected override async Task OnInitializedAsync()
    {
        Positions = new List<PositionDto>() { new PositionDto { Id = 1, Name = "Ładowanie pozycji..." } };

        var positionResult = await UserService.GetPositions();
        Positions = positionResult;

        var token = await localStorage.GetItemAsync<string>("token");
        if (token != null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleValidSubmit()
    {
        ShowErrorMessage = false;
        IsLoading = true;
        await Task.Delay(1000);
        await UserService.Register(registerModel);
        IsLoading = false;
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value.ToString();
        PasswordLengthValid = password.Length >= 8;
        PasswordUppercaseValid = password.Any(char.IsUpper);
        PasswordLowercaseValid = password.Any(char.IsLower);
        PasswordNumberValid = password.Any(char.IsDigit);
        PasswordPunctuationValid = password.Any(ch => char.IsPunctuation(ch) || char.IsSymbol(ch));
    }

    private void ValidateConfirmPassword(ChangeEventArgs e)
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
        }
        else
        {
            confirmPasswordValidationMessage = "";
        }
    }

    private string GetValidationClass(bool isValid)
    {
        return isValid ? "valid" : "invalidZero";
    }
}
