@page "/register"
@using System.ComponentModel.DataAnnotations
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams
@using VolleyLeague.Shared.Dtos.Users
@inject IUserService UserService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else if (!isVerificationStep)
{
    <div class="login-area">
        <div class="container">
            <div class="row display-flex-column-center">
                <div class="col-lg-6 col-md-12 mr-10">
                    <div class="login-form">
                        <div class="card">
                            <div class="card-body">
                                <EditForm Model="@registerModel" OnValidSubmit="HandleValidSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <!-- Fields for FirstName, LastName, Email, Password, ConfirmPassword -->
                                    <div class="form">
                                        <label for="FirstName" class="control-label"></label>
                                        <input @bind="registerModel.FirstName" type="text" class="form-control" id="FirstName" placeholder="Imię" required />
                                        <ValidationMessage class="text-danger" For="@(() => registerModel.FirstName)" />
                                        <small class="form-text text-muted">Twoje dane będą weryfikowane przez sędziów w lidze.</small>
                                    </div>
                                    <div class="form">
                                        <label for="LastName" class="control-label"></label>
                                        <input @bind="registerModel.LastName" type="text" class="form-control" id="LastName" placeholder="Nazwisko" required />
                                        <ValidationMessage class="text-danger" For="@(() => registerModel.LastName)" />
                                        <small class="form-text text-muted">Jeśli wpiszesz dokładnie takie samo imię i nazwisko jak Twój kapitan podczas tworzenia drużyny będziesz mógł zsynchronizować konto poprzez dołączenie do drużyny.</small>
                                    </div>
                                    <div class="form">
                                        <label for="Email" class="control-label"></label>
                                        <input @bind="registerModel.Email" type="email" class="form-control" id="Email" placeholder="Adres e-mail" required />
                                        <ValidationMessage class="text-danger" For="@(() => registerModel.Email)" />
                                        <small class="form-text text-muted">Adres email jest potrzebny do logowania się w serwisie.</small>
                                    </div>
                                    <div class="form">
                                        <label for="Password" class="control-label"></label>
                                        <input @bind="registerModel.Password" type="password" class="form-control" id="Password" placeholder="Hasło" required @oninput="ValidatePassword" />
                                        <ValidationMessage class="text-danger" For="@(() => registerModel.Password)" />
                                        <ul class="password-requirements mt-2">
                                            <li class="@GetValidationClass(PasswordLengthValid)">Co najmniej 8 znaków</li>
                                            <li class="@GetValidationClass(PasswordUppercaseValid)">Zawiera wielkie litery</li>
                                            <li class="@GetValidationClass(PasswordLowercaseValid)">Zawiera małe litery</li>
                                            <li class="@GetValidationClass(PasswordNumberValid)">Zawiera cyfry</li>
                                            <li class="@GetValidationClass(PasswordPunctuationValid)">Zawiera znaki interpunkcyjne</li>
                                        </ul>
                                    </div>
                                    <div class="form">
                                        <label for="ConfirmPassword" class="control-label"></label>
                                        <input @bind="registerModel.ConfirmPassword" type="password" class="form-control" id="ConfirmPassword" placeholder="Powtórz hasło" required />
                                        <ValidationMessage class="text-danger" For="@(() => registerModel.ConfirmPassword)" />
                                        @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                        {
                                            <div class="text-danger mt-2">@confirmPasswordValidationMessage</div>
                                        }
                                    </div>
                                    @if (ShowErrorMessage)
                                    {
                                        <div class="text-danger mt-2" style="margin-top: 30px; margin-bottom: 20px; font-size: 120%;">@ErrorMessage</div>
                                    }
                                    <div class="form">
                                        <button type="submit" class="btn btn-primary">Zarejestruj</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="verification-area">
        <div class="container">
            <div class="row display-flex-column-center">
                <div class="col-lg-6 col-md-12 mr-10">
                    <div class="verification-form">
                        <div class="card">
                            <div class="card-body">
                                <EditForm Model="@verificationModel" OnValidSubmit="HandleVerificationSubmit">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="form">
                                        <label for="VerificationCode" class="control-label"></label>
                                        <input @bind="verificationModel.VerificationCode" type="text" class="form-control" id="VerificationCode" placeholder="Kod weryfikacyjny" required />
                                        <ValidationMessage class="text-danger" For="@(() => verificationModel.VerificationCode)" />
                                    </div>
                                    <div class="form">
                                        <button type="submit" class="btn btn-primary">Zweryfikuj</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (IsSubmitted)
{
    <div class="modal" style="display:block">
        <div class="modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dziękujemy za rejestrację!</h5>
                </div>
                <div class="modal-body">
                    <p>Twoje konto zostało pomyślnie zarejestrowane.</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="NavigateToLogin">Przejdź do logowania</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .password-requirements {
        list-style-type: none;
        padding: 0;
    }

        .password-requirements li {
            display: flex;
            align-items: center;
            margin-top: 0.5em;
        }

            .password-requirements li.valid {
                color: green;
            }

            .password-requirements li::before {
                content: '✘';
                margin-right: 8px;
                font-size: 1.2em;
                display: inline-block;
            }

            .password-requirements li.valid::before {
                content: '✔';
                color: green;
            }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog-centered {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .modal-content {
        background: white;
        padding: 1em;
        max-width: 500px;
        width: 100%;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }
</style>

@code {
    private RegisterDto registerModel = new RegisterDto();
    private VerificationCodeDto verificationModel = new VerificationCodeDto();

    private bool IsLoading = false;
    private bool IsSubmitted = false;
    private bool ShowErrorMessage = false;
    private string ErrorMessage = "";
    private string confirmPasswordValidationMessage = "";
    private bool pageReady = false;
    private bool isVerificationStep = false;

    private List<PositionDto> Positions = new List<PositionDto>();

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private bool PasswordLengthValid = false;
    private bool PasswordUppercaseValid = false;
    private bool PasswordLowercaseValid = false;
    private bool PasswordNumberValid = false;
    private bool PasswordPunctuationValid = false;

    protected override async Task OnInitializedAsync()
    {
        Positions = new List<PositionDto>() { new PositionDto { Id = 1, Name = "Ładowanie pozycji..." } };

        var positionResult = await UserService.GetPositions();
        Positions = positionResult;

        var token = await localStorage.GetItemAsync<string>("token");
        if (token != null)
        {
            NavigationManager.NavigateTo("/");
        }
        pageReady = true;
    }

    private async Task HandleValidSubmit()
    {
        pageReady = false;
        ShowErrorMessage = false;
        IsLoading = true;
        ValidateConfirmPassword();

        if (string.IsNullOrEmpty(confirmPasswordValidationMessage))
        {
            await Task.Delay(1000);
            var result = await UserService.StartRegistration(registerModel);
            IsLoading = false;

            if (result.Success)
            {
                isVerificationStep = true;
                verificationModel.Email = registerModel.Email;
            }
            else
            {
                ShowErrorMessage = true;
                ErrorMessage = result.Message;
            }
        }
        else
        {
            IsLoading = false;
        }
        pageReady = true;
    }

    private async Task HandleVerificationSubmit()
    {
        pageReady = false;
        ShowErrorMessage = false;
        IsLoading = true;

        var completeRegistrationDto = new CompleteRegistrationDto
            {
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Email = verificationModel.Email,
                Password = registerModel.Password,
                VerificationCode = verificationModel.VerificationCode
            };

        var result = await UserService.CompleteRegistration(completeRegistrationDto);
        IsLoading = false;

        if (result.Success)
        {
            IsSubmitted = true;
        }
        else
        {
            ShowErrorMessage = true;
            ErrorMessage = result.Message;
        }
        pageReady = true;
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value.ToString();
        PasswordLengthValid = password.Length >= 8;
        PasswordUppercaseValid = password.Any(char.IsUpper);
        PasswordLowercaseValid = password.Any(char.IsLower);
        PasswordNumberValid = password.Any(char.IsDigit);
        PasswordPunctuationValid = password.Any(ch => char.IsPunctuation(ch) || char.IsSymbol(ch));
    }

    private void ValidateConfirmPassword()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
        }
        else
        {
            confirmPasswordValidationMessage = "";
        }
    }

    private string GetValidationClass(bool isValid)
    {
        return isValid ? "valid" : "invalid";
    }
}
