@page "/team/{Id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Discussion
@using VolleyLeague.Shared.Dtos.Matches
@using VolleyLeague.Shared.Dtos.Teams
@inject ITeamService teamService
@inject IMatchService matchService
@inject HttpClient Http

<section class="category_section team">
    <div class="container">
        <div class="row">
            <div class="article_title header_purple">
                <h2>Profil</h2>
            </div>
            <div class="text-center">
                @if (TeamData != null)
                {
                    <h2>@TeamData.Name</h2>
                    <div class="d-flex flex-row flex-wrap justify-content-center">
                        @if (TeamData.Logo != null && TeamData.Logo.Length > 0)
                        {
                            <img src="@GetLogoSrc(TeamData.Logo)" style="width: 200px; height: 200px; margin-bottom: 30px">
                        }

                        @if (IsTeamImageAvailable)
                        {
                            <div>
                                <img src="@($"/assets/images/teams/{Id}.jpg")" style="width:70%; height: 70%;" />
                            </div>
                        }
                        <div class="p-2 card table-responsive" style="">
                            <div class="card-header" style="margin-top: 30px">
                                <h2>Zawodnicy</h2>
                            </div>
                            <div class="table-responsive">
                                <table class="table text-left">
                                    <thead>
                                        <tr>
                                            <th>LP:</th>
                                            <th>Imię i nazwisko</th>
                                            <th>Numer</th>
                                            <th>Wzrost</th>
                                            <th>Pozycja</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>1</td>
                                            <td>
                                                <NavLink href=@{
                                                     "/user-profile/" + TeamData.Captain.Id
                                                     }><b>@TeamData.Captain.FirstName @TeamData.Captain.LastName (K)</b></NavLink>
                                            </td>
                                            <td>@TeamData.Captain.JerseyNumber</td>
                                            <td>@TeamData.Captain.Height</td>
                                            <td>@TeamData.Captain.PositionName</td>
                                        </tr>
                                        @foreach (var player in TeamData.Players)
                                        {
                                            <tr>
                                                <td>@(++i)</td>
                                                <td>
                                                    <NavLink href=@{
                                                     "/user-profile/" + player.Id
                                                     }>@player.FirstName @player.LastName</NavLink>
                                                </td>
                                                <td>@(player.JerseyNumber.ToString() ?? "?")</td>
                                                <td>@(player.Height.ToString() ?? "?")</td>
                                                <td>@(player.PositionName.ToString() ?? "?")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                        </div>
                    </div>

                    <div class="p-2 card mt-4 mb-5 table-responsive">
                        <div class="card-header">
                            <h2>Informacje o drużynie</h2>
                        </div>
                        <table class="table text-left">
                            <tbody>
                                <tr>
                                    <td><b>Nazwa</b></td>
                                    <td>@TeamData.Name</td>
                                </tr>
                                <tr>
                                    <td><b>Strona www</b></td>
                                    <td><a href="@TeamData.Website">@TeamData.Website</a></td>
                                </tr>
                                <tr>
                                    <td><b>Opis</b></td>
                                    <td>@TeamData.TeamDescription</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <div class="p-2 card mt-4 mb-5 table-responsive-lg">
                        <div class="card-header">
                            Historia meczów
                            <a href="/team-result/@Id/" class="team-link" style="color: #0268d6;">Wyniki</a> <!-- Linki czarne -->
                        </div>
                    </div>
                }
                else
                {
                    @if (ErrorMessage != "")
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }
                    else
                    {
                        <LoadingIcon></LoadingIcon>
                    }
                }
            </div>
        </div>
    </div>
</section>

<style>
    .category_section.team {
        margin-top: 50px;
    }

    .table th, .table td {
        text-align: center;
        vertical-align: middle;
    }

    .thead-dark th {
        background-color: #343a40;
        color: white;
    }

    .table-bordered th,
    .table-bordered td {
        border: 1px solid #dee2e6;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .table-responsive {
        margin-top: 20px;
    }
</style>

@code {
    private int i = 1;

    public string ErrorMessage { get; set; } = "";

    public string CommentsErrorMessage { get; set; } = "";

    private ScheduleFilter Filter = new ScheduleFilter();

    private class ScheduleFilter
    {
        public int SeasonId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();
    }

    [Parameter]
    public int Id { get; set; }

    public TeamDto? TeamData { get; set; }

    public List<CommentDto> TeamComments { get; set; } = new List<CommentDto>();

    public List<SeasonDto>? Seasons { get; set; }

    public NewCommentDto commentModel { get; set; } = new NewCommentDto();

    public List<MatchSummaryDto>? Games { get; set; }

    public bool SubmitLoading { get; set; } = false;

    public string NewCommentError { get; set; } = "";

    public bool IsTeamImageAvailable { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        TeamData = await GetTeamProfile();
        IsTeamImageAvailable = await CheckTeamImageAvailability();

        commentModel = new NewCommentDto()
        {
            ContentLocationId = Id,
        };

        Filter.SeasonList = await matchService.GetSeasons();

        StateHasChanged();
    }

    private void UpdateSeason(ChangeEventArgs e)
    {
        int seasonId = Convert.ToInt32(e.Value);

        UpdateSeason(seasonId);
    }

    private async Task ApplyFilter()
    {
        Games = await matchService.GetMatches(Filter.SeasonId, Id);
    }

    private EventCallback<ChangeEventArgs> OnSeasonChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private async void UpdateSeason(int id)
    {
        Games = await matchService.GetMatches(id, Id);
    }

    public async Task<TeamDto?> GetTeamProfile()
    {
        var teamResponse = await teamService.GetTeam(Id);
        return teamResponse;
    }

    private async Task<bool> CheckTeamImageAvailability()
    {
        var filePath = $"assets/images/teams/{Id}.jpg";
        try
        {
            var response = await Http.GetAsync(filePath);
            return response.IsSuccessStatusCode;
        }
        catch
        {
            return false;
        }
    }

    private string GetLogoSrc(byte[] logo)
    {
        return $"data:image/png;base64,{Convert.ToBase64String(logo)}";
    }
}
