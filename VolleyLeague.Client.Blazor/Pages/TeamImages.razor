@page "/teams-images"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams
@inject ITeamService TeamService
@inject HttpClient Http
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Admin")]

<head>
    <link rel="stylesheet" href="/assets/css/custom-team-images.css" />
</head>

<AuthorizeView Roles="Admin">
    <Authorized>
        @if (!PageReady)
        {
            <section id="loading_section" style="margin-top: 150px" class="loading_section">
                <div class="container">
                    <div id="spinner"></div>
                </div>
            </section>
        }
        else
        {
            <section class="category_section">
                <div class="container">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mobile">
                                <div class="article_title">
                                    <h2>Panel zarządzania zdjęciami</h2>
                                </div>
                                <p class="text-danger">@ErrorMessage</p>

                                <div class="table-responsive">
                                    <table class="table table-striped text-center">
                                        <thead>
                                            <tr>
                                                <th>Nazwa zespołu</th>
                                                <th>Czy ma obraz</th>
                                                <th>Prześlij obraz</th>
                                                <th>Wyświetl obraz</th>
                                                <th>Usuń obraz</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Teams != null)
                                            {
                                                @foreach (var team in Teams)
                                                {
                                                    <tr style="background-color: white">
                                                        <td>@team.Name</td>
                                                        <td style="color: @(team.HasImage ? "green" : "red");">
                                                            @(team.HasImage ? "Tak" : "Nie")
                                                        </td>
                                                        <td>
                                                            @if (!team.HasImage)
                                                            {
                                                                <label class="btn btn-primary">
                                                                    Prześlij
                                                                    <InputFile OnChange="@((e) => UploadTeamImage(team.Id, e))" style="display:none;" />
                                                                </label>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (team.HasImage)
                                                            {
                                                                <button @onclick="@(() => ToggleImageDisplay(team.Id))" class="btn btn-primary">
                                                                    @(DisplayedImageTeamId == team.Id ? "Ukryj" : "Wyświetl")
                                                                </button>
                                                            }
                                                        </td>
                                                        <td>
                                                            @if (team.HasImage)
                                                            {
                                                                <button @onclick="@(() => DeleteTeamImage(team.Id))" class="btn btn-danger">
                                                                    Usuń
                                                                </button>
                                                            }
                                                        </td>
                                                    </tr>
                                                    @if (DisplayedImageTeamId == team.Id && !string.IsNullOrEmpty(SelectedImage))
                                                    {
                                                        <tr>
                                                            <td colspan="5" class="text-center">
                                                                <img src="@SelectedImage" style="max-width:100%; max-height:400px;" />
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        }
    </Authorized>
</AuthorizeView>

@code {
    public bool PageReady = false;
    public string ErrorMessage = "";
    public List<TeamImageDto> Teams = new List<TeamImageDto>();
    private string SelectedImage;
    private int? DisplayedImageTeamId;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams();
        PageReady = true;
    }

    private async Task LoadTeams()
    {
        try
        {
            var additionalTeams = await TeamService.GetAllTeamsImageStatus();
            Teams = additionalTeams;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił błąd podczas ładowania zespołów: {ex.Message}";
        }
    }

    private async Task UploadTeamImage(int teamId, InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(file.OpenReadStream());
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "file", file.Name);

                var response = await Http.PostAsync($"api/Team/UploadTeamImage/{teamId}", content);
                if (response.IsSuccessStatusCode)
                {
                    await LoadTeams();
                }
                else
                {
                    ErrorMessage = $"Nie udało się przesłać obrazu dla zespołu {teamId}.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił błąd podczas przesyłania obrazu: {ex.Message}";
        }
    }


    private async Task LoadAndShowImage(int teamId)
    {
        try
        {
            var response = await Http.GetAsync($"api/Team/DownloadTeamImage/{teamId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(content);
                SelectedImage = $"data:image/jpeg;base64,{base64}";
            }
            else
            {
                ErrorMessage = $"Nie udało się załadować obrazu dla zespołu {teamId}.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił błąd podczas ładowania obrazu: {ex.Message}";
        }
    }

    private async Task DeleteTeamImage(int teamId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Team/DeleteTeamImage/{teamId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTeams();
            }
            else
            {
                ErrorMessage = $"Nie udało się usunąć obrazu dla zespołu {teamId}.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił błąd podczas usuwania obrazu: {ex.Message}";
        }
    }

    private async Task ToggleImageDisplay(int teamId)
    {
        if (DisplayedImageTeamId == teamId)
        {
            DisplayedImageTeamId = null;
            SelectedImage = null;
        }
        else
        {
            DisplayedImageTeamId = teamId;
            await LoadAndShowImage(teamId);
        }
    }
}