@page "/teams-images"
@using System.Net.Http.Headers
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams
@inject ITeamService TeamService
@inject HttpClient Http
@inject IJSRuntime JS

@if (!PageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <section class="category_section">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="mobile">
                        <div class="article_title header_purple">
                            <h2>Teams</h2>
                        </div>
                        <p class="text-danger">@ErrorMessage</p>

                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Team Name</th>
                                        <th>Has Image</th>
                                        <th>Upload Image</th>
                                        <th>View Image</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Teams != null)
                                    {
                                        @foreach (var team in Teams)
                                        {
                                            <tr>
                                                <td>@team.Name</td>
                                                <td>
                                                    <span style="color: @(team.HasImage ? "green" : "red");">
                                                        @(team.HasImage ? "&#10003;" : "&#10007;")
                                                    </span>
                                                </td>
                                                <td>
                                                    <InputFile OnChange="@((e) => UploadTeamImage(team.Id, e))" />
                                                </td>
                                                <td>
                                                    <button @onclick="@(() => ToggleImageDisplay(team.Id))" class="btn btn-primary">
                                                        @(DisplayedImageTeamId == team.Id ? "Hide" : "View")
                                                    </button>
                                                </td>
                                            </tr>
                                            @if (DisplayedImageTeamId == team.Id && !string.IsNullOrEmpty(SelectedImage))
                                            {
                                                <tr>
                                                    <td colspan="4" class="text-center">
                                                        <img src="@SelectedImage" style="max-width:100%; max-height:400px;" />
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<style>
    .btn-label {
        background: none;
        border: none;
        padding: 6px 12px;
        font-weight: bold;
        color: #555;
        text-align: left;
    }

    .dropdown-toggle {
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }

    .card {
        margin-bottom: 50px;
    }

    .btn.btn-default.dropdown-toggle {
        background: #e5e7eb;
        font-size: 12px;
        color: black;
        font-weight: bold;
        text-align: left;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    .table {
        margin-top: 20px;
        color: black;
    }

        .table th, .table td {
            border-bottom: 1px solid #ddd;
            text-align: center;
        }
</style>

@code {
    public bool PageReady = false;
    public string ErrorMessage = "";
    public List<TeamImageDto> Teams = new List<TeamImageDto>();
    private string SelectedImage;
    private int? DisplayedImageTeamId;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams();
        PageReady = true;
    }

    private async Task LoadTeams()
    {
        try
        {
            var additionalTeams = await TeamService.GetAllTeamsImageStatus();
            Teams.AddRange(additionalTeams);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while loading teams: {ex.Message}";
        }
    }

    private async Task UploadTeamImage(int teamId, InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var content = new MultipartFormDataContent();
                content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);

                var response = await Http.PostAsync($"api/File/UploadTeamImage/{teamId}", content);
                if (response.IsSuccessStatusCode)
                {
                    // Refresh the list to show the new image status
                    await LoadTeams();
                }
                else
                {
                    ErrorMessage = $"Failed to upload image for team {teamId}.";
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while uploading image: {ex.Message}";
        }
    }

    private async Task LoadAndShowImage(int teamId)
    {
        try
        {
            var response = await Http.GetAsync($"api/File/DownloadTeamImage/{teamId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(content);
                SelectedImage = $"data:image/jpeg;base64,{base64}";
            }
            else
            {
                ErrorMessage = $"Failed to load image for team {teamId}.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while loading image: {ex.Message}";
        }
    }

    private async Task ToggleImageDisplay(int teamId)
    {
        if (DisplayedImageTeamId == teamId)
        {
            DisplayedImageTeamId = null;
            SelectedImage = null;
        }
        else
        {
            DisplayedImageTeamId = teamId;
            await LoadAndShowImage(teamId);
        }
    }
}
