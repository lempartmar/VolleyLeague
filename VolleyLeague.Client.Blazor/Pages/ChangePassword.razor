@page "/change-password"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Shared.Dtos.Teams
@inject IUserService UserService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Admin,Player")]

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Zmiana hasła</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    <EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-floating mb-4">
                            <InputText type="password" id="currentPassword" class="form-control" @bind-Value="changePasswordModel.CurrentPassword" placeholder="Obecne hasło" />
                            <label for="currentPassword">Obecne hasło</label>
                        </div>

                        <div class="form-floating mb-4">
                            <InputText type="password" id="newPassword" class="form-control" @bind-Value="changePasswordModel.NewPassword" placeholder="Nowe hasło" @oninput="ValidatePassword" />
                            <label for="newPassword">Nowe hasło</label>
                            <ul class="password-requirements mt-2">
                                <li class="@GetValidationClass(PasswordLengthValid)">Co najmniej 8 znaków</li>
                                <li class="@GetValidationClass(PasswordUppercaseValid)">Zawiera wielkie litery</li>
                                <li class="@GetValidationClass(PasswordLowercaseValid)">Zawiera małe litery</li>
                                <li class="@GetValidationClass(PasswordNumberValid)">Zawiera cyfry</li>
                                <li class="@GetValidationClass(PasswordPunctuationValid)">Zawiera znaki interpunkcyjne</li>
                            </ul>
                        </div>

                        <div class="form-floating mb-4">
                            <InputText type="password" id="confirmNewPassword" class="form-control" @bind-Value="changePasswordModel.ConfirmNewPassword" placeholder="Potwierdź nowe hasło" @oninput="ValidateConfirmPassword" />
                            <label for="confirmNewPassword">Potwierdź nowe hasło</label>
                            @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                            {
                                <div class="text-danger mt-2">@confirmPasswordValidationMessage</div>
                            }
                        </div>

                        <div class="mb-4">
                            <button type="submit" class="btn btn-primary">Zmień hasło</button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(changePasswordMessage))
                    {
                        <div class="alert alert-info mt-3">@changePasswordMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ChangePasswordDto changePasswordModel = new ChangePasswordDto();
    private string changePasswordMessage = string.Empty;
    private string confirmPasswordValidationMessage = string.Empty;
    private bool pageReady = false;

    private bool PasswordLengthValid = false;
    private bool PasswordUppercaseValid = false;
    private bool PasswordLowercaseValid = false;
    private bool PasswordNumberValid = false;
    private bool PasswordPunctuationValid = false;

    protected override async Task OnInitializedAsync()
    {
        pageReady = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("loadCssFile", "/assets/css/custom-password-change.css");
        }
    }

    private async Task HandleChangePassword()
    {
        if (changePasswordModel.NewPassword != changePasswordModel.ConfirmNewPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var changePasswordDto = new ChangePasswordDto
                {
                    CurrentPassword = changePasswordModel.CurrentPassword,
                    NewPassword = changePasswordModel.NewPassword,
                    ConfirmNewPassword = changePasswordModel.NewPassword
                };

            var result = await UserService.ChangePasswordAsync(changePasswordDto);

            if (result)
            {
                changePasswordMessage = "Hasło zostało pomyślnie zmienione.";
                NavigationManager.NavigateTo("/");
            }
            else
            {
                changePasswordMessage = "Zmiana hasła nie powiodła się.";
            }
        }
        else
        {
            changePasswordMessage = "Użytkownik nie jest zalogowany.";
        }
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value.ToString();
        PasswordLengthValid = password.Length >= 8;
        PasswordUppercaseValid = password.Any(char.IsUpper);
        PasswordLowercaseValid = password.Any(char.IsLower);
        PasswordNumberValid = password.Any(char.IsDigit);
        PasswordPunctuationValid = password.Any(ch => char.IsPunctuation(ch) || char.IsSymbol(ch));
    }

    private void ValidateConfirmPassword(ChangeEventArgs e)
    {
        var confirmPassword = e.Value.ToString();
        if (changePasswordModel.NewPassword != confirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
        }
        else
        {
            confirmPasswordValidationMessage = "";
        }
    }

    private string GetValidationClass(bool isValid)
    {
        return isValid ? "valid" : string.Empty;
    }
}
