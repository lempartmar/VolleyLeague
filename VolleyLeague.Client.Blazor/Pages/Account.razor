@page "/account"
@using Microsoft.AspNetCore.WebUtilities

@using VolleyLeague.Client.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Client.Blazor.Authentication
@using VolleyLeague.Client.Blazor.Shared.Dtos
@using static VolleyLeague.Client.Blazor.Services.AccountService
@using System.Net.Http.Headers
@using System.Globalization
@using VolleyLeague.Shared.Dtos.Teams
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject ITeamService teamService

<section class="rts-account-section section-gap">
    <div class="container">
        <div class="account-inner">
            <div class="account-side-navigation">
                @if (IsAdmin || (IsPlayer && !IsAdmin))
                {
                    <button class="filter-btn @GetActiveClass(InfoPages.UserProfile)" @onclick="() => ShowSection(InfoPages.UserProfile)">
                        <i class="fal fa-user"></i> Profil Użytkownika
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.EditProfile)" @onclick="() => ShowSection(InfoPages.EditProfile)">
                        <i class="fal fa-user-edit"></i> Edytuj Profil
                    </button>
                    @if (HasTeam && IsPlayer && !IsAdmin)
                    {
                        <button class="filter-btn @GetActiveClass(InfoPages.ManageTeam)" @onclick="() => ShowSection(InfoPages.ManageTeam)">
                            <i class="fal fa-users-cog"></i> Zarządzaj drużyną
                        </button>
                    }
                    else if (IsPlayer && !IsAdmin)
                    {
                        <button class="filter-btn @GetActiveClass(InfoPages.CreateTeam)" @onclick="() => ShowSection(InfoPages.CreateTeam)">
                            <i class="fal fa-users"></i> Stwórz drużynę
                        </button>
                    }
                    <button class="filter-btn @GetActiveClass(InfoPages.ChangePassword)" @onclick="() => ShowSection(InfoPages.ChangePassword)">
                        <i class="fal fa-key"></i> Zmień hasło
                    </button>
                }
                @if (IsAdmin)
                {
                    <button class="filter-btn @GetActiveClass(InfoPages.CreateTeam)" @onclick="() => ShowSection(InfoPages.CreateTeam)">
                        <i class="fal fa-users"></i> Stwórz drużynę
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.Referees)" @onclick="() => ShowSection(InfoPages.Referees)">
                        <i class="fal fa-users-cog"></i> Zarządzaj Sędziami
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.HandleSeason)" @onclick="() => ShowSection(InfoPages.HandleSeason)">
                        <i class="fal fa-calendar-alt"></i> Zarządzaj Sezonami
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.CreateMatch)" @onclick="() => ShowSection(InfoPages.CreateMatch)">
                        <i class="fal fa-calendar-plus"></i> Dodaj mecz
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.ManageTeams)" @onclick="() => ShowSection(InfoPages.ManageTeams)">
                        <i class="fal fa-users"></i> Zarządzaj drużynami
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.TeamsImages)" @onclick="() => ShowSection(InfoPages.TeamsImages)">
                        <i class="fal fa-images"></i> Zarządzaj zdjęciami
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.AddArticle)" @onclick="() => ShowSection(InfoPages.AddArticle)">
                        <i class="fal fa-newspaper"></i> Dodaj Artykuł
                    </button>
                    <button class="filter-btn @GetActiveClass(InfoPages.EditUserDefinedCode)" @onclick="() => ShowSection(InfoPages.EditUserDefinedCode)">
                        <i class="fal fa-code"></i> Edytuj Kod Użytkownika
                    </button>
                }
            </div>
            <div class="account-main-area">
                @switch (currentSection)
                {
                    case InfoPages.UserProfile:
                        <UserProfile Id="@playerSummary.Id" />
                        break;
                    case InfoPages.EditProfile:
                        <EditProfile Id="@playerSummary.Id" />
                        break;
                    case InfoPages.CreateTeam:
                        <CreateTeam />
                        break;
                    case InfoPages.ChangePassword:
                        <ChangePassword />
                        break;
                    case InfoPages.ManageTeam:
                        <ManageTeam />
                        break;
                    case InfoPages.Referees:
                        <Referees />
                        break;
                    case InfoPages.HandleSeason:
                        <HandleSeason />
                        break;
                    case InfoPages.CreateMatch:
                        <CreateMatch />
                        break;
                    case InfoPages.ManageTeams:
                        <ManageTeams />
                        break;
                    case InfoPages.TeamsImages:
                        <TeamImages />
                        break;
                    case InfoPages.AddArticle:
                        <AddArticle />
                        break;
                    case InfoPages.EditUserDefinedCode:
                        <EditUserDefinedCodes />
                        break;
                }
            </div>
        </div>
    </div>
</section>

@code {
    public enum InfoPages
    {
        EditProfile,
        UserProfile,
        CreateTeam,
        ChangePassword,
        ManageTeam,
        Referees,
        HandleSeason,
        CreateMatch,
        ManageTeams,
        TeamsImages,
        AddArticle,
        EditUserDefinedCode 
    }

    private InfoPages currentSection = InfoPages.UserProfile;
    private bool IsPlayer { get; set; }
    private bool IsAdmin { get; set; }
    private PlayerSummaryDto playerSummary = new PlayerSummaryDto();
    private bool HasTeam { get; set; } = false;

    [Inject] private IUserService userService { get; set; }
    [Inject] private AuthenticationStateProvider authStateProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            IsPlayer = user.IsInRole("Player");
            IsAdmin = user.IsInRole("Admin");

            playerSummary = await userService.GetUserSummary();
            HasTeam = await userService.IsTeamCaptain();

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("section", out var section))
            {
                if (Enum.TryParse<InfoPages>(section, true, out var parsedSection))
                {
                    currentSection = parsedSection;
                }
            }
        }
    }

    private void ShowSection(InfoPages section)
    {
        currentSection = section;
        Navigation.NavigateTo($"/account?section={section}");
    }

    private string GetActiveClass(InfoPages section)
    {
        return currentSection == section ? "active" : string.Empty;
    }
}
