@page "/schedule"
@inject IMatchService matchService
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Matches
@using VolleyLeague.Shared.Dtos.Teams

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="rts-match-result-section rts-match-result-section2-white rts-match-schedule-section inner section-gap">
        <div class="container">
            <div class="card m-2 p-2">
                <EditForm Model="Filter">
                    <div class="form-group btn-group">
                        <label for="seasonSelect" class="btn btn-default btn-label">SEZON:</label>
                        <Select value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="btn btn-default dropdown-toggle">
                            @foreach (var season in Filter.SeasonList)
                            {
                                <option value="@season.Id">@season.Name</option>
                            }
                        </Select>
                    </div>
                    <div class="form-group btn-group">
                        <label for="RoundSelect" class="btn btn-default btn-label">RUNDA:</label>
                        <Select value="@Filter.RoundId" @onchange="OnRoundChanged" class="btn btn-default dropdown-toggle">
                            @foreach (var round in Filter.RoundList)
                            {
                                <option value="@round.Id">@round.Name</option>
                            }
                        </Select>
                    </div>
                    <div class="form-group btn-group">
                        <label for="leagueSelect" class="btn btn-default btn-label">LIGA:</label>
                        <Select value="@Filter.LeagueId" @onchange="OnLeagueChanged" class="btn btn-default dropdown-toggle">
                            @foreach (var league in Filter.LeagueList)
                            {
                                <option value="@league.Id">@league.Name</option>
                            }
                        </Select>
                    </div>
                </EditForm>
            </div>
            <div class="row justify-content-center">
                @foreach (var game in Games)
                {
                    var imgSrcHome = (game.HomeTeam.Logo != null && game.HomeTeam.Logo.Length > 0)
                    ? $"data:image/png;base64,{Convert.ToBase64String(game.HomeTeam.Logo)}"
                    : "/assets/images/Logo_alternative.png";

                    var imgSrcGuest = (game.GuestTeam.Logo != null && game.GuestTeam.Logo.Length > 0)
                    ? $"data:image/png;base64,{Convert.ToBase64String(game.GuestTeam.Logo)}"
                    : "/assets/images/Logo_alternative.png";

                    <div class="col-12">
                        <div class="match-single background-white">
                            <div class="match-single-content" style="width: 100%">
                                <div class="match-scores" style="display: flex; justify-content: space-between;">
                                    <div class="club club1" style="flex:1;">
                                        <div class="club-logo mr--20">
                                            <div class="display-flex-column-center">
                                                <img class="team-logo-size" src=@imgSrcHome alt="club-logo">
                                                <span class="club-name color-dark" style="margin-top: 20px;">@game.HomeTeam.Name.ToUpper()</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="club-score" style="flex: 1;display: flex;justify-content: space-between;flex-direction: column;">
                                        <div style="display: flex;flex-direction: row;justify-content: center;flex: 3;align-items: center;">
                                            <span class="club-name color-dark left-score"><h2>@game.Team1Score</h2></span>
                                        <div class="colon">VS</div>
                                            <span class="club-name color-dark right-score"><h2>@game.Team2Score</h2></span>
                                        </div>
                                        <div class="block-wrap">
                                            <span class="match-date">@game.Schedule</span>
                                            <span class="stadium-name">@game.VenueName.ToUpper()</span>
                                        </div>
                                    </div>
                                    <div class="club club2" style="flex:1;">
                                        <div class="club-logo ml--20">
                                            <div class="display-flex-column-center">
                                                <img class="team-logo-size" src=@imgSrcGuest alt="club-logo">
                                                <span class="club-name color-dark" style="margin-top: 20px;">@game.GuestTeam.Name.ToUpper()</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="match-bottom-action">
                                <div class="play-video">
                                    <a href="https://www.youtube.com/watch?v=G4t6TqG5LM8" class="action-item popup-video">SZCZEGÓŁY MECZU</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <section class="category_section">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="mobile">
                        <div class="article_title header_purple">
                            <h2>Terminarz</h2>
                        </div>
                        @if (pageReady)
                        {
                            <div class="card m-2 p-2">
                                <EditForm Model="Filter">
                                    <div class="form-group btn-group">
                                        <label for="seasonSelect" class="btn btn-default btn-label">SEZON:</label>
                                        <Select value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="btn btn-default dropdown-toggle">
                                            @foreach (var season in Filter.SeasonList)
                                            {
                                                <option value="@season.Id">@season.Name</option>
                                            }
                                        </Select>
                                    </div>
                                    <div class="form-group btn-group">
                                        <label for="RoundSelect" class="btn btn-default btn-label">RUNDA:</label>
                                        <Select value="@Filter.RoundId" @onchange="OnRoundChanged" class="btn btn-default dropdown-toggle">
                                            @foreach (var round in Filter.RoundList)
                                            {
                                                <option value="@round.Id">@round.Name</option>
                                            }
                                        </Select>
                                    </div>
                                    <div class="form-group btn-group">
                                        <label for="leagueSelect" class="btn btn-default btn-label">LIGA:</label>
                                        <Select value="@Filter.LeagueId" @onchange="OnLeagueChanged" class="btn btn-default dropdown-toggle">
                                            @foreach (var league in Filter.LeagueList)
                                            {
                                                <option value="@league.Id">@league.Name</option>
                                            }
                                        </Select>
                                    </div>
                                </EditForm>
                            </div>
                            @if (scheduleLoading)
                            {
                                <div class="d-flex justify-content-center">
                                    <div id="spinner"></div>
                                </div>
                            }
                            else if (Games.Count == 0)
                            {
                                <div class="alert alert-info" role="alert">
                                    Brak meczów do wyświetlenia
                                </div>
                            }
                            else if (Games.Count > 0)
                            {
                                <div class="p-2 card mt-4 mb-5 table-responsive-lg">
                                    <div class="container-fluid">
                                        <div class="row">
                                            @foreach (var game in Games)
                                            {
                                                <div class="col-xs-12 game-entry">
                                                    <div class="scoreboard d-flex justify-content-between align-items-center">
                                                        <div class="team-section home-team">
                                                            <img src="@GetLogoSrc(game.HomeTeam.Logo)" class="team-logo" alt="@game.HomeTeam.Name">
                                                            <a href="/team/@game.HomeTeam.Id/" class="team-link" style="color: #0268d6;">@game.HomeTeam.Name</a>
                                                        </div>
                                                        <div class="score-section d-flex align-items-center">
                                                            <div class="team-score">@game.Team1Score</div>
                                                            <div class="versus">VS</div>
                                                            <div class="team-score">@game.Team2Score</div>
                                                        </div>
                                                        <div class="team-section guest-team">
                                                            <img src="@GetLogoSrc(game.GuestTeam.Logo)" class="team-logo" alt="@game.GuestTeam.Name">
                                                            <a href="/team/@game.GuestTeam.Id/" class="team-link" style="color: #0268d6;">@game.GuestTeam.Name</a>
                                                        </div>
                                                        <div class="vertical-line" style="border:1px solid #eee; height: 100px;"></div>
                                                        <div class="additional-info">
                                                            <div class="referee">
                                                                <strong>Sędzia:</strong> @game.Referee.FirstName @game.Referee.LastName
                                                            </div>
                                                            <div class="venue">
                                                                <strong>Miejsce:</strong> @game.VenueName
                                                            </div>
                                                            <strong>Data:</strong> @game.Schedule.ToShortDateString()
                                                            <div class="venue">
                                                                <strong>Dodatkowe Informacje:</strong> @game.MatchInfo
                                                            </div>
                                                        </div>
                                                        <div class="vertical-line" style="border:1px solid #eee; height: 100px;"></div>
                                                        <div class="mvp-info">
                                                            <strong><NavLink href=@{
                                                    "/match/" + game.Id
}>Szczegóły Meczu</NavLink></strong>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger" role="alert">
                                    @errorMessage
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center">
                                    <div id="spinner"></div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
}

<style>
    .btn-label {
        background: none;
        border: none;
        padding: 6px 12px;
        font-weight: bold;
        color: #555;
        text-align: left;
    }

    .dropdown-toggle {
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }

    .card {
        margin-bottom: 50px;
    }

    .btn.btn-default.dropdown-toggle {
        background: #e5e7eb;
        font-size: 12px;
        color: black;
        font-weight: bold;
        text-align: left;
    }

    .game-entry {
        margin-bottom: 20px;
        color: black;
        min-height: 150px;
        border: none;
    }

    .scoreboard {
        display: flex;
        justify-content: space-between;
    }

    .team-section {
        flex: 2;
        display: flex;
        align-items: center;
        flex-direction: column;
    }

    .team-section, .score-section, .additional-info, .mvp-info {
        text-align: center;
        padding: 0 10px;
        flex: 1;
    }

    .score-section {
        flex: 1;
    }

    .mvp-info {
        flex: 1;
    }

    .additional-info {
        flex: 2;
    }

    .vertical-line {
        border-left: 1px solid #000;
        height: 100%;
    }

    .team-logo {
        width: 80px;
        margin-bottom: 5px;
    }

    .team-name {
        max-width: 110px;
        min-width: 110px;
        margin-bottom: 5px;
        color: #0268d6;
    }

    .team-score {
        font-size: 1.2em;
        font-weight: bold;
        color: black;
    }

    .versus {
        font-size: 1.0em;
        font-weight: bold;
        margin: 0 10px;
        color: black;
    }

    .game-date {
        font-size: 0.8em;
    }

    .container-fluid {
        width: 100%;
        margin-top: 35px;
    }

    .d-flex {
        display: flex;
    }

    .justify-content-between {
        justify-content: space-between;
    }

    .align-items-center {
        align-items: center;
        justify-content: center;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }
</style>

@code {
    private List<MatchSummaryDto> Games { get; set; } = new List<MatchSummaryDto>();
    private bool scheduleLoading = false;
    private bool pageReady = false;
    private bool standingsLoading = false;
    private string standingsErrorMessage = "";
    private List<StandingsDto> StandingsList = new List<StandingsDto>();
    private static List<RoundDto> AllRounds { get; set; } = new List<RoundDto>();
    private string errorMessage = string.Empty;

    private ScheduleFilter Filter = new ScheduleFilter();

    public class ScheduleFilter
    {
        private int seasonId;
        public int SeasonId
        {
            get => seasonId;
            set
            {
                seasonId = value;
                RoundList = AllRounds.Where(x => x.SeasonId == value).ToList();
                RoundId = RoundList.FirstOrDefault()?.Id ?? 0;
            }
        }
        public int RoundId { get; set; }
        public int LeagueId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();
        public List<RoundDto> RoundList { get; set; } = new List<RoundDto>();
        public List<LeagueDto> LeagueList { get; set; } = new List<LeagueDto>();

        public ScheduleFilter()
        {
            SeasonId = 37;
            RoundId = 1237;
            LeagueId = 1;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        scheduleLoading = true;
        var result = await matchService.GetMatches(37, 1, 1237);
        if (result != null)
        {
            Games = result;
        }
        scheduleLoading = false;
        await LoadInitialDataAsync();
    }

    private async Task LoadInitialDataAsync()
    {
        var seasonsResult = await matchService.GetSeasons();
        if (seasonsResult != null)
        {
            Filter.SeasonList = seasonsResult.OrderByDescending(s => s.Id).ToList();
        }
        else
        {
            return;
        }

        var roundsResult = await matchService.GetRounds();
        if (roundsResult != null)
        {
            AllRounds = roundsResult;
            Filter.RoundList = AllRounds.Where(x => x.SeasonId == Filter.SeasonId).ToList();
            Filter.RoundId = Filter.RoundList.FirstOrDefault()?.Id ?? 0;
        }
        else
        {
            return;
        }

        var leaguesResult = await matchService.GetLeagues();
        if (leaguesResult != null)
        {
            Filter.LeagueList = leaguesResult;
        }
        else
        {
            return;
        }

        pageReady = true;
    }

    private async Task OnSeasonOrLeagueChanged(ChangeEventArgs e, bool isSeason)
    {
        var selectedId = Convert.ToInt32(e.Value.ToString());
        if (isSeason)
        {
            Filter.SeasonId = selectedId;
        }
        else
        {
            Filter.LeagueId = selectedId;
        }

        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        if (Filter.SeasonId == 0 || Filter.RoundId == 0 || Filter.LeagueId == 0)
        {
            return;
        }
        scheduleLoading = true;
        var result = await matchService.GetMatches(Filter.SeasonId, Filter.LeagueId, Filter.RoundId);
        if (result != null)
        {
            Games = result;
        }
        scheduleLoading = false;
    }

    private EventCallback<ChangeEventArgs> OnSeasonChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private EventCallback<ChangeEventArgs> OnLeagueChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.LeagueId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private EventCallback<ChangeEventArgs> OnRoundChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.RoundId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private string GetLogoSrc(byte[] logo)
    {
        if (logo != null && logo.Length > 0)
        {
            return $"data:image/png;base64,{Convert.ToBase64String(logo)}";
        }
        else
        {
            return "/assets/img/Logo_alternative.png";
        }
    }
}
