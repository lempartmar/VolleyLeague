@page "/schedule"
@inject IMatchService matchService
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Matches
@using VolleyLeague.Shared.Dtos.Teams

@if (!pageReady)
{
    <section id="loading_section" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="rts-match-result-section rts-match-result-section2-white rts-match-schedule-section inner">
        <div class="container">
            <div class="rts-point-table-section section-gap">
                <div class="container">
                    <div class="table-area table-full">
                        <form class="checkout-form">
                            <div class="row">
                                <div class="col-xl-3 col-md-3">
                                    <div class="form-group">
                                        <label for="seasonSelect" class="form-label">SEZON:</label>
                                        <select id="seasonSelect" value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="form-select">
                                            @foreach (var season in Filter.SeasonList)
                                            {
                                                <option value="@season.Id">@season.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-xl-3 col-md-3">
                                    <div class="form-group">
                                        <label for="roundSelect" class="form-label">RUNDA:</label>
                                        <select id="roundSelect" value="@Filter.RoundId" @onchange="OnRoundChanged" class="form-select">
                                            @foreach (var round in Filter.RoundList)
                                            {
                                                <option value="@round.Id">@round.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-xl-3 col-md-3">
                                    <div class="form-group">
                                        <label for="leagueSelect" class="form-label">LIGA:</label>
                                        <select id="leagueSelect" value="@Filter.LeagueId" @onchange="OnLeagueChanged" class="form-select">
                                            @foreach (var league in Filter.LeagueList)
                                            {
                                                <option value="@league.Id">@league.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center">
                @foreach (var game in Games)
                {
                    var imgSrcHome = (game.HomeTeam.Logo != null && game.HomeTeam.Logo.Length > 0)
                    ? $"data:image/png;base64,{Convert.ToBase64String(game.HomeTeam.Logo)}"
                    : "/assets/images/Logo_alternative.png";

                    var imgSrcGuest = (game.GuestTeam.Logo != null && game.GuestTeam.Logo.Length > 0)
                    ? $"data:image/png;base64,{Convert.ToBase64String(game.GuestTeam.Logo)}"
                    : "/assets/images/Logo_alternative.png";

                    <div class="col-12 main-section">
                        <div class="match-single background-white">
                            <div class="match-single-content">
                                <div class="match-scores">
                                    <div class="club club1">
                                        <div class="club-logo">
                                            <div class="display-flex-column-center">
                                                <img class="team-logo-size" src=@imgSrcHome alt="club-logo">
                                                <span class="club-name">@game.HomeTeam.Name.ToUpper()</span>
                                            </div>
                                        </div>
                                    </div>

                                    @if (DateTime.Now < game.Schedule)
                                    {
                                        <div class="club-score">
                                            <div class="d-flex">
                                                <span class="club-name left-score"><h4>Mecz się jeszcze nie odbył</h4></span>
                                            </div>
                                            <div class="block-wrap">
                                                <span class="stadium-name">@game.Schedule</span>
                                                <span class="stadium-name">@game.VenueName.ToUpper()</span>
                                            </div>
                                        </div>
                                    }
                                    else if (game.Set1Team1Score == null)
                                    {
                                        <div class="club-score">
                                            <div class="d-flex">
                                                <div class="club-name left-score"><h4>Oczekujemy na wprowadzenie wyniku</h4></div>
                                            </div>
                                            <div class="block-wrap">
                                                <span class="stadium-name">@game.Schedule</span>
                                                <span class="stadium-name">@game.VenueName.ToUpper()</span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="club-score">
                                            <div class="d-flex">
                                                <span class="club-name left-score"><h2>@game.Team1Score</h2></span>
                                                <div class="colon">VS</div>
                                                <span class="club-name right-score"><h2>@game.Team2Score</h2></span>
                                            </div>
                                            <div class="block-wrap">
                                                <span class="stadium-name">@game.Schedule</span>
                                                <span class="stadium-name">@game.VenueName.ToUpper()</span>
                                            </div>
                                        </div>
                                    }

                                    <div class="club club2">
                                        <div class="club-logo">
                                            <div class="display-flex-column-center">
                                                <img class="team-logo-size" src=@imgSrcGuest alt="club-logo">
                                                <span class="club-name">@game.GuestTeam.Name.ToUpper()</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form">
                                <a href="/match/@game.Id" class="btn btn-primary custom-button width-max">SZCZEGÓŁY MECZU</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<MatchSummaryDto> Games { get; set; } = new List<MatchSummaryDto>();
    private bool scheduleLoading = false;
    private bool pageReady = false;
    private bool standingsLoading = false;
    private string standingsErrorMessage = "";
    private List<StandingsDto> StandingsList = new List<StandingsDto>();
    private static List<RoundDto> AllRounds { get; set; } = new List<RoundDto>();
    private string errorMessage = string.Empty;

    private ScheduleFilter Filter = new ScheduleFilter();

    public class ScheduleFilter
    {
        private int seasonId;
        public int SeasonId
        {
            get => seasonId;
            set
            {
                seasonId = value;
                RoundList = AllRounds.Where(x => x.SeasonId == value).ToList();
                RoundId = RoundList.FirstOrDefault()?.Id ?? 0;
            }
        }
        public int RoundId { get; set; }
        public int LeagueId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();
        public List<RoundDto> RoundList { get; set; } = new List<RoundDto>();
        public List<LeagueDto> LeagueList { get; set; } = new List<LeagueDto>();

        public ScheduleFilter()
        {
            SeasonId = 37;
            RoundId = 1237;
            LeagueId = 1;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        scheduleLoading = true;
        var result = await matchService.GetMatches(37, 1, 1237);
        if (result != null)
        {
            Games = result;
        }
        scheduleLoading = false;
        await LoadInitialDataAsync();
    }

    private async Task LoadInitialDataAsync()
    {
        var seasonsResult = await matchService.GetSeasons();
        if (seasonsResult != null)
        {
            Filter.SeasonList = seasonsResult.OrderByDescending(s => s.Id).ToList();
        }
        else
        {
            return;
        }

        var roundsResult = await matchService.GetRounds();
        if (roundsResult != null)
        {
            AllRounds = roundsResult;
            Filter.RoundList = AllRounds.Where(x => x.SeasonId == Filter.SeasonId).ToList();
            Filter.RoundId = Filter.RoundList.FirstOrDefault()?.Id ?? 0;
        }
        else
        {
            return;
        }

        var leaguesResult = await matchService.GetLeagues();
        if (leaguesResult != null)
        {
            Filter.LeagueList = leaguesResult;
        }
        else
        {
            return;
        }

        pageReady = true;
    }

    private async Task OnSeasonOrLeagueChanged(ChangeEventArgs e, bool isSeason)
    {
        var selectedId = Convert.ToInt32(e.Value.ToString());
        if (isSeason)
        {
            Filter.SeasonId = selectedId;
        }
        else
        {
            Filter.LeagueId = selectedId;
        }

        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        if (Filter.SeasonId == 0 || Filter.RoundId == 0 || Filter.LeagueId == 0)
        {
            return;
        }
        scheduleLoading = true;
        var result = await matchService.GetMatches(Filter.SeasonId, Filter.LeagueId, Filter.RoundId);
        if (result != null)
        {
            Games = result;
        }
        scheduleLoading = false;
    }

    private EventCallback<ChangeEventArgs> OnSeasonChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private EventCallback<ChangeEventArgs> OnLeagueChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.LeagueId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private EventCallback<ChangeEventArgs> OnRoundChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.RoundId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private string GetLogoSrc(byte[] logo)
    {
        if (logo != null && logo.Length > 0)
        {
            return $"data:image/png;base64,{Convert.ToBase64String(logo)}";
        }
        else
        {
            return "/assets/img/Logo_alternative.png";
        }
    }
}
