@page "/mvp"
@inject IMatchService matchService
@inject IAdminDefinedCodeService adminDefinedCodeService
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams

@if (!pageReady)
{
    <section id="loading_section" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="rts-point-table-section section-gap">
        <div class="container">
            <h1 class="display-mobile-header">MVP</h1>
            <div class="table-area table-full">
                <form class="checkout-form">
                    <div class="row">
                        <div class="col-xl-3 col-md-3">
                            <div class="form-group">
                                <label for="seasonSelect" class="form-label">SEZON:</label>
                                <select id="seasonSelect" value="@Filter.SeasonId" @onchange="@(e => OnSeasonOrLeagueChanged(e, true))" class="form-select">
                                    @foreach (var season in Filter.SeasonList)
                                    {
                                        <option value="@season.Id">@season.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-xl-3 col-md-3">
                            <div class="form-group">
                                <label for="leagueSelect" class="form-label">LIGA:</label>
                                <select id="leagueSelect" value="@Filter.LeagueId" @onchange="@(e => OnSeasonOrLeagueChanged(e, false))" class="form-select">
                                    @foreach (var league in Filter.LeagueList)
                                    {
                                        <option value="@league.Id">@league.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </form>

                @if (mvpLoading)
                {
                    <div class="d-flex justify-content-center">
                        <div class="table-spinner"></div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(mvpErrorMessage))
                {
                    <div class="alert alert-danger mvp-alert-danger">
                        @mvpErrorMessage
                    </div>
                }
                else if (MvpList.Count == 0)
                {
                    <div class="alert alert-info mvp-alert-info" role="alert">
                        Nie znaleziono MVP dla danego sezonu.
                    </div>
                }
                else
                {
                    <div class="table-area table-full">
                        <table class="table table-table-bordered">
                            <thead class="table-thead table-thead-dark">
                                <tr class="table-head-tr">
                                    <th scope="col">LP</th>
                                    <th scope="col">Zawodnik</th>
                                    <th scope="col">Drużyna</th>
                                    <th scope="col">Ilość MVP</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int rank = 1;
                                }
                                @foreach (var player in MvpList)
                                {
                                    <tr>
                                        <td><span class="position-number">@rank</span></td>
                                        <td>
                                            <div class="table-title-area">
                                                <h4 class="player-name"><a href="/user/@player.Id/">@player.Name</a></h4>
                                            </div>
                                        </td>
                                        <td><span class="team-name">@player.TeamName</span></td>
                                        <td><span class="mvp-count">@player.TotalMvpCount</span></td>
                                    </tr>
                                    rank++;
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool pageReady = false;
    private bool mvpLoading = false;
    private string mvpErrorMessage = "";
    private List<PlayerSummaryDto> MvpList = new List<PlayerSummaryDto>();
    private ScheduleFilter Filter = new ScheduleFilter(0, 0);

    private class ScheduleFilter
    {
        public int SeasonId { get; set; }
        public int LeagueId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();
        public List<LeagueDto> LeagueList { get; set; } = new List<LeagueDto>();

        public ScheduleFilter(int startingSeasonId, int startingLeagueId)
        {
            SeasonId = startingSeasonId;
            LeagueId = startingLeagueId;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        int startingSeasonId = int.Parse(await adminDefinedCodeService.GetValueByKey("seasonId-for-main-page"));
        int startingLeagueId = int.Parse(await adminDefinedCodeService.GetValueByKey("leagueId-for-main-page"));
        Filter = new ScheduleFilter(startingSeasonId, startingLeagueId);
        await LoadInitialDataAsync();
        await ApplyFilter();
    }

    private async Task LoadInitialDataAsync()
    {
        Filter.SeasonList = (await matchService.GetSeasons()).OrderByDescending(s => s.Id).ToList();
        Filter.LeagueList = await matchService.GetLeagues();
        pageReady = true;
    }

    private async Task OnSeasonOrLeagueChanged(ChangeEventArgs e, bool isSeason)
    {
        var selectedId = Convert.ToInt32(e.Value.ToString());
        if (isSeason)
        {
            Filter.SeasonId = selectedId;
        }
        else
        {
            Filter.LeagueId = selectedId;
        }

        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        mvpLoading = true;
        mvpErrorMessage = string.Empty;
        MvpList = await matchService.GetMvpBySeasonAndLeague(Filter.SeasonId, Filter.LeagueId);
        if (MvpList == null || MvpList.Count == 0)
        {
            mvpErrorMessage = "Nie znaleziono MVP dla danego sezonu.";
        }
        else
        {
            mvpErrorMessage = string.Empty;
        }
        mvpLoading = false;
    }
}
