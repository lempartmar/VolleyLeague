@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Client.Blazor.Authentication
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Client.Blazor.Shared.Dtos
@using static VolleyLeague.Client.Blazor.Services.AccountService
@using System.Net.Http.Headers
@inject AuthenticationStateProvider authStateProvider
@inject IUserAccount AccountService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject HttpClient Http

<div class="login-area">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-12 mr-10">
                <div class="login-form">
                    <div class="section-title">
                        <h2>Login</h2>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <EditForm Model="User" OnValidSubmit="HandleLogin">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="form">
                                    <input @bind="User.Email" type="email" class="form-control" id="username" placeholder="Username or email address*" required />
                                </div>
                                <div class="form">
                                    <div class="password-input">
                                        <input @bind="User.Password" type="password" class="form-control" id="password" placeholder="Password*" required />
                                        <span class="show-password-input"></span>
                                    </div>
                                </div>
                                <div class="form">
                                    <input type="checkbox" class="form-check-input" id="remember" />
                                    <label for="remember" class="form-label">Remember Me</label>
                                </div>
                                <div class="form">
                                    <button type="submit" class="btn">
                                        Login <i class="fal fa-long-arrow-right"></i>
                                    </button>
                                </div>
                                <a class="forgot-password" href="#" @onclick="NavigateToResetPassword">Lost your password?</a>
                            </EditForm>
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="text-danger mt-2" style="margin-top: 30px; margin-bottom: 20px; font-size: 120%;">@errorMessage</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public LoginDto User { get; set; } = new();

    private string errorMessage = string.Empty;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    async Task HandleLogin()
    {
        var result = await AccountService.LoginAccount(User);

        if (result.Success)
        {
            await sessionStorage.SetItemAsync("authToken", result.Token);
            ((CustomAuthenticationStateProvider)authStateProvider).NotifyUserAuthentication(result.Token);
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", result.Token);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(result.Token);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    void NavigateToResetPassword()
    {
        NavigationManager.NavigateTo("/request-password-reset");
    }
}
