@page "/reset-password"
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Entities.Dtos.Users
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IConfiguration _config

@code {
    private PasswordResetDto resetModel = new PasswordResetDto();
    private string resetMessage = string.Empty;
    private bool isTokenValid = false;

    protected override async Task OnInitializedAsync()
    {
        // Pobierz token z parametrów zapytania
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            resetModel.Token = token;
            isTokenValid = await UserService.IsTokenValid(token);
        }
        else
        {
            isTokenValid = false;
        }
    }

    async Task HandlePasswordReset()
    {
        var result = await UserService.ResetPassword(resetModel);

        if (result)
        {
            resetMessage = "Hasło zostało pomyślnie zresetowane.";
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            resetMessage = "Resetowanie hasła nie powiodło się.";
        }
    }

    private ClaimsPrincipal GetPrincipalFromExpiredToken(string token)
    {
        var tokenValidationParameters = new TokenValidationParameters
            {
                ValidateAudience = false,
                ValidateIssuer = false,
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_config["Jwt:Key"])),
                ValidateLifetime = false // Ignorujemy datę wygaśnięcia tokenu
            };

        var tokenHandler = new JwtSecurityTokenHandler();
        try
        {
            var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out var securityToken);
            var jwtSecurityToken = securityToken as JwtSecurityToken;

            if (jwtSecurityToken == null || !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))
            {
                throw new SecurityTokenException("Invalid token");
            }

            return principal;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Token validation error: {ex.Message}");
            throw new SecurityTokenException("Invalid token");
        }
    }
}

<div class="container reset-password">
    <div class="row justify-content-center">
        <div class="col-md-6 mt-3">
            <div class="entity_title text-center">
                <h1><a>Resetowanie hasła</a></h1>
            </div>
            <div class="entity_content">
                @if (isTokenValid)
                {
                    <EditForm Model="resetModel" OnValidSubmit="HandlePasswordReset">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="card">
                            <div class="card-body reset-password">
                                <div class="form-group mb-3 md-4">
                                    <input type="password" class="form-control" @bind="resetModel.NewPassword" placeholder="New Password"></input>
                                </div>
                            </div>
                            <div class="card-footer text-center">
                                <button class="btn" style="background-color: #7d7d7d; color: white;" type="submit">
                                    Resetuj hasło
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="alert alert-danger text-center">
                        Token wygasł lub jest nieprawidłowy.
                    </div>
                }
                @if (!string.IsNullOrEmpty(resetMessage))
                {
                    <div class="alert alert-info mt-3 text-center">@resetMessage</div>
                }
            </div>
        </div>
    </div>
</div>
