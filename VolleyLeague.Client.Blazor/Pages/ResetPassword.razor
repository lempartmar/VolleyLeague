@page "/reset-password"
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Teams
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IConfiguration _config

@code {
    private PasswordResetDto resetModel = new PasswordResetDto();
    private string confirmPassword = string.Empty;
    private string resetMessage = string.Empty;
    private bool isTokenValid = false;
    private string confirmPasswordValidationMessage = string.Empty;
    private bool pageReady = false;
    private bool PasswordLengthValid = false;
    private bool PasswordUppercaseValid = false;
    private bool PasswordLowercaseValid = false;
    private bool PasswordNumberValid = false;
    private bool PasswordPunctuationValid = false;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            resetModel.Token = token;
            isTokenValid = await UserService.IsTokenValid(token);
            pageReady = true;
        }
        else
        {
            isTokenValid = false;
            pageReady = true;
        }
    }

    async Task HandlePasswordReset()
    {
        if (resetModel.NewPassword != confirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
            return;
        }

        var result = await UserService.ResetPassword(resetModel);

        if (result)
        {
            resetMessage = "Hasło zostało pomyślnie zresetowane.";
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            resetMessage = "Resetowanie hasła nie powiodło się.";
        }
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value.ToString();
        PasswordLengthValid = password.Length >= 8;
        PasswordUppercaseValid = password.Any(char.IsUpper);
        PasswordLowercaseValid = password.Any(char.IsLower);
        PasswordNumberValid = password.Any(char.IsDigit);
        PasswordPunctuationValid = password.Any(ch => char.IsPunctuation(ch) || char.IsSymbol(ch));
    }

    private void ValidateConfirmPassword(ChangeEventArgs e)
    {
        confirmPassword = e.Value.ToString();
        if (resetModel.NewPassword != confirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
        }
        else
        {
            confirmPasswordValidationMessage = "";
        }
    }

    private string GetValidationClass(bool isValid)
    {
        return isValid ? "valid" : "invalid";
    }
}

<div class="login-area">
    <div class="container">
        <div class="row display-flex-column-center">
            <div class="col-lg-6 col-md-12 mr-10">
                <div class="login-form">
                    <div class="card">
                        <div class="card-body">
                            @if (!pageReady)
                            {
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border" role="status">
                                        <span class="sr-only">Ładowanie...</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                @if (isTokenValid)
                                {
                                    <EditForm Model="resetModel" OnValidSubmit="HandlePasswordReset">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                        <div class="form">
                                            <label for="NewPassword" class="control-label"></label>
                                            <input type="password" class="form-control" id="NewPassword" @bind="resetModel.NewPassword" @oninput="ValidatePassword" placeholder="Nowe hasło"></input>
                                            <ValidationMessage For="@(() => resetModel.NewPassword)" />
                                            <ul class="password-requirements mt-2">
                                                <li class="@GetValidationClass(PasswordLengthValid)">Co najmniej 8 znaków</li>
                                                <li class="@GetValidationClass(PasswordUppercaseValid)">Zawiera wielkie litery</li>
                                                <li class="@GetValidationClass(PasswordLowercaseValid)">Zawiera małe litery</li>
                                                <li class="@GetValidationClass(PasswordNumberValid)">Zawiera cyfry</li>
                                                <li class="@GetValidationClass(PasswordPunctuationValid)">Zawiera znaki interpunkcyjne</li>
                                            </ul>
                                        </div>
                                        <div class="form">
                                            <label for="ConfirmPassword" class="control-label"></label>
                                            <input type="password" class="form-control" id="ConfirmPassword" @bind="confirmPassword" placeholder="Potwierdź nowe hasło" @oninput="ValidateConfirmPassword"></input>
                                            @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                            {
                                                <div class="text-danger mt-2">@confirmPasswordValidationMessage</div>
                                            }
                                        </div>
                                        <div class="form">
                                            <button class="btn btn-primary" type="submit">Resetuj hasło</button>
                                        </div>
                                    </EditForm>
                                }
                                else
                                {
                                    <div class="alert alert-danger text-center">
                                        Token wygasł lub jest nieprawidłowy.
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(resetMessage))
                                {
                                    <div class="alert alert-info mt-3 text-center">@resetMessage</div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .password-requirements {
        list-style-type: none;
        padding: 0;
    }

        .password-requirements li {
            display: flex;
            align-items: center;
            margin-top: 0.5em;
        }

            .password-requirements li.valid {
                color: green;
            }

            .password-requirements li::before {
                content: '✘';
                margin-right: 8px;
                font-size: 1.2em;
                display: inline-block;
            }

            .password-requirements li.valid::before {
                content: '✔';
                color: green;
            }

    .login-area {
        padding: 40px 0;
    }

    .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    .card-body {
        padding: 20px;
    }

    .form {
        margin-bottom: 15px;
    }

        .form label {
            font-weight: bold;
        }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .text-danger {
        color: #dc3545;
    }

    .alert-info {
        color: #0c5460;
        background-color: #d1ecf1;
        border-color: #bee5eb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
</style>
