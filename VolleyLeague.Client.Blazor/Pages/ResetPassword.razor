@page "/reset-password"
@using System.Security.Claims
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.IdentityModel.Tokens
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Entities.Dtos.Users
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IConfiguration _config

@code {
    private PasswordResetDto resetModel = new PasswordResetDto();
    private string confirmPassword = string.Empty;
    private string resetMessage = string.Empty;
    private bool isTokenValid = false;
    private string confirmPasswordValidationMessage = string.Empty;
    private bool pageReady = false;

    // Password validation states
    private bool PasswordLengthValid = false;
    private bool PasswordUppercaseValid = false;
    private bool PasswordLowercaseValid = false;
    private bool PasswordNumberValid = false;
    private bool PasswordPunctuationValid = false;

    protected override async Task OnInitializedAsync()
    {
        // Pobierz token z parametrów zapytania
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            resetModel.Token = token;
            isTokenValid = await UserService.IsTokenValid(token);
            pageReady = true;
        }
        else
        {
            isTokenValid = false;
            pageReady = true;
        }
    }

    async Task HandlePasswordReset()
    {
        if (resetModel.NewPassword != confirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
            return;
        }

        var result = await UserService.ResetPassword(resetModel);

        if (result)
        {
            resetMessage = "Hasło zostało pomyślnie zresetowane.";
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            resetMessage = "Resetowanie hasła nie powiodło się.";
        }
    }

    private void ValidatePassword(ChangeEventArgs e)
    {
        var password = e.Value.ToString();
        PasswordLengthValid = password.Length >= 8;
        PasswordUppercaseValid = password.Any(char.IsUpper);
        PasswordLowercaseValid = password.Any(char.IsLower);
        PasswordNumberValid = password.Any(char.IsDigit);
        PasswordPunctuationValid = password.Any(ch => char.IsPunctuation(ch) || char.IsSymbol(ch));
    }

    private void ValidateConfirmPassword(ChangeEventArgs e)
    {
        var confirmPassword = e.Value.ToString();
        if (resetModel.NewPassword != confirmPassword)
        {
            confirmPasswordValidationMessage = "Hasła nie są identyczne.";
        }
        else
        {
            confirmPasswordValidationMessage = "";
        }
    }

    private string GetValidationClass(bool isValid)
    {
        return isValid ? "valid" : "invalidZero";
    }
}

<section class="category_section">
    <div class="container">
        <div class="row" style="display:flex; justify-content: center; margin-top:30px">
            <div class="col-md-6 mt-3">
                <div class="entity_title text-center">
                    <h1><a>Resetowanie hasła</a></h1>
                </div>

                @if (!pageReady)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Ładowanie...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="entity_content">
                        @if (isTokenValid)
                        {
                            <EditForm Model="resetModel" OnValidSubmit="HandlePasswordReset">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="card">
                                    <div class="card-body reset-password">
                                        <div class="form-group mb-3 md-4">
                                            <input type="password" class="form-control" @bind="resetModel.NewPassword" @oninput="ValidatePassword" placeholder="Nowe hasło"></input>
                                            <ValidationMessage For="@(() => resetModel.NewPassword)" />
                                            <ul class="password-requirements mt-2">
                                                <li class="@GetValidationClass(PasswordLengthValid)">Co najmniej 8 znaków</li>
                                                <li class="@GetValidationClass(PasswordUppercaseValid)">Zawiera wielkie litery</li>
                                                <li class="@GetValidationClass(PasswordLowercaseValid)">Zawiera małe litery</li>
                                                <li class="@GetValidationClass(PasswordNumberValid)">Zawiera cyfry</li>
                                                <li class="@GetValidationClass(PasswordPunctuationValid)">Zawiera znaki interpunkcyjne</li>
                                            </ul>
                                        </div>
                                        <div class="form-group mb-3 md-4">
                                            <input type="password" class="form-control" @bind="confirmPassword" placeholder="Potwierdź nowe hasło" @oninput="ValidateConfirmPassword"></input>
                                            @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                            {
                                                <div class="text-danger mt-2">@confirmPasswordValidationMessage</div>
                                            }
                                        </div>
                                    </div>
                                    <div class="card-footer text-center">
                                        <button class="btn" style="background-color: #7d7d7d; color: white;" type="submit">
                                            Resetuj hasło
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <div class="alert alert-danger text-center">
                                Token wygasł lub jest nieprawidłowy.
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(resetMessage))
                        {
                            <div class="alert alert-info mt-3 text-center">@resetMessage</div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</section>

<style>
    .password-requirements {
        list-style-type: none;
        padding: 0;
    }

        .password-requirements li {
            display: flex;
            align-items: center;
            margin-top: 0.5em;
        }

            .password-requirements li.valid {
                color: green;
            }

            .password-requirements li::before {
                content: '✘';
                margin-right: 8px;
                font-size: 1.2em;
                display: inline-block;
            }

            .password-requirements li.valid::before {
                content: '✔';
                color: green;
            }
</style>
