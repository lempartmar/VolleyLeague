@page "/addArticle"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Discussion
@using Radzen.Blazor
@inject IArticleService ArticleService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin")]

<RadzenDialog />

<div class="account-main accountdtls filterd-items">
    <div class="login-form">
        <div class="section-title">
            <h2>Dodaj artykuł</h2>
        </div>
        <div class="card">
            <div class="card-body">
                @if (!IsSubmitted)
                {
                    <EditForm Model="@articleDto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-floating mb-4">
                            <InputText id="Title" class="form-control" @bind-Value="articleDto.Title" placeholder="Tytuł" />
                            <label for="Title">Tytuł</label>
                            <ValidationMessage For="@(() => articleDto.Title)" />
                        </div>

                        <div class="form-floating mb-4">
                            <RadzenHtmlEditor style="height: 300px;" @bind-Value="articleDto.Content" UploadUrl="@UploadImageUrl">
                                <RadzenHtmlEditorUndo />
                                <RadzenHtmlEditorRedo />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorBold />
                                <RadzenHtmlEditorItalic />
                                <RadzenHtmlEditorUnderline />
                                <RadzenHtmlEditorStrikeThrough />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorColor />
                                <RadzenHtmlEditorBackground />
                                <RadzenHtmlEditorImage />
                                <RadzenHtmlEditorRemoveFormat />
                            </RadzenHtmlEditor>
                            <ValidationMessage For="@(() => articleDto.Content)" />
                        </div>

                        <div class="form-floating mb-4">
                            <label class="btn btn-primary">
                                Wybierz plik
                                <InputFile OnChange="HandleFileChange" style="display:none;" />
                            </label>
                            <ValidationMessage For="@(() => articleDto.Image)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Zapisz artykuł</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <h3>Zarejestrowano pomyślnie!</h3>
                    <p><a href="/login">Zaloguj się</a></p>
                }
            </div>
            <RadzenHtmlEditor @bind-Value=@htmlValue style="height: 300px;" Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="upload/image" />

            <EventConsole @ref=@console />
        </div>
    </div>
</div>

<RadzenHtmlEditor @bind-Value=@htmlValue style="height: 300px;" Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="upload/image" />

<EventConsole @ref=@console />

@code {

    string htmlValue = "<h1>Hello World!</h1>";

    EventConsole console;

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        console.Log($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        console.Log($"Change: {html}");
    }

    void OnInput(string html)
    {
        console.Log($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        console.Log($"Execute: {args.CommandName}");
    }
    private ArticleDto articleDto = new ArticleDto();
    private bool IsLoading = false;
    private bool IsSubmitted = false;
    private bool ShowErrorMessage = false;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleValidSubmit()
    {
        ShowErrorMessage = false;
        IsLoading = true;
        await ArticleService.AddArticle(articleDto);
        IsLoading = false;
        IsSubmitted = true;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            using (var stream = imageFile.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    articleDto.Image = memoryStream.ToArray();
                }
            }
        }
    }

    private string UploadImageUrl => Navigation.ToAbsoluteUri("/api/upload/image").ToString();
}
