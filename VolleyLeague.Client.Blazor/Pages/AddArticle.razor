@page "/addArticle"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Discussion
@using Radzen.Blazor
@inject IArticleService ArticleService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin")]

<RadzenDialog />

<div class="account-main accountdtls filterd-items">
    <div class="login-form">
        <div class="section-title">
            <h2>Dodaj artykuł</h2>
        </div>
        <div class="card">
            <div class="card-body">
                @if (!IsSubmitted)
                {
                    <EditForm Model="@articleDto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-floating mb-4">
                            <InputText id="Title" class="form-control" @bind-Value="articleDto.Title" placeholder="Tytuł" />
                            <label for="Title">Tytuł</label>
                            <ValidationMessage class="text-danger" For="@(() => articleDto.Title)" />
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label" for="Content">Zawartość:</label>
                            <div class="col-sm-10">
                                <RadzenHtmlEditor style="height: 300px;" @bind-Value="articleDto.Content" UploadUrl="@UploadImageUrl">
                                    <RadzenHtmlEditorUndo />
                                    <RadzenHtmlEditorRedo />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorBold />
                                    <RadzenHtmlEditorItalic />
                                    <RadzenHtmlEditorUnderline />
                                    <RadzenHtmlEditorStrikeThrough />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor />
                                    <RadzenHtmlEditorBackground />
                                    <RadzenHtmlEditorFont />
                                    <RadzenHtmlEditorFontSize />
                                    <RadzenHtmlEditorSubscript />
                                    <RadzenHtmlEditorSuperscript />
                                    <RadzenHtmlEditorAlignment />
                                    <RadzenHtmlEditorOrderedList />
                                    <RadzenHtmlEditorUnorderedList />
                                    <RadzenHtmlEditorLink />
                                    <RadzenHtmlEditorRemoveFormat />
                                </RadzenHtmlEditor>
                                <ValidationMessage class="text-danger" For="@(() => articleDto.Content)" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label" for="Image">Zdjęcie:</label>
                            <div class="col-sm-10">
                                <label class="btn btn-primary">
                                    Wybierz plik (max 256 KB)
                                    <InputFile OnChange="HandleFileChange" style="display:none;" />
                                </label>
                                <ValidationMessage class="text-danger" For="@(() => articleDto.Image)" />
                                @if (!string.IsNullOrEmpty(FileErrorMessage))
                                {
                                    <div class="text-danger">@FileErrorMessage</div>
                                }
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-10 offset-sm-2">
                                <button type="submit" class="btn btn-primary">Zapisz artykuł</button>
                            </div>
                        </div>
                    </EditForm>
                }
                else
                {
                    <h3>Artykuł został dodany pomyślnie!</h3>
                    <p><a href="/">Wróć do strony głównej</a></p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private const long MaxFileSize = 256 * 1024; // 256 KB

    private ArticleDto articleDto = new ArticleDto();
    private bool IsLoading = false;
    private bool IsSubmitted = false;
    private bool ShowErrorMessage = false;
    private string ErrorMessage = "";
    private string FileErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleValidSubmit()
    {
        ShowErrorMessage = false;
        IsLoading = true;
        await ArticleService.AddArticle(articleDto);
        IsLoading = false;
        IsSubmitted = true;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            Console.WriteLine($"File size: {imageFile.Size} bytes");

            if (imageFile.Size > MaxFileSize)
            {
                FileErrorMessage = "Zdjęcie jest za duże. Maksymalny rozmiar to 256 KB.";
                articleDto.Image = null;
            }
            else
            {
                FileErrorMessage = "";
                using (var stream = imageFile.OpenReadStream(MaxFileSize))
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        articleDto.Image = memoryStream.ToArray();
                    }
                }
            }
            StateHasChanged();
        }
    }

    private string UploadImageUrl => Navigation.ToAbsoluteUri("/api/upload/image").ToString();
}
