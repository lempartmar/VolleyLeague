@page "/addArticle"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Discussion
@using Radzen.Blazor
@inject IArticleService ArticleService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation

@attribute [Authorize(Roles = "Admin")]

<RadzenDialog />

<section class="category_section">
    <div class="container">
        <div class="row">
            <h2>Dodaj artykuł</h2>
            <div class="m-2">
                @if (!IsSubmitted)
                {
                    <EditForm Model="@articleDto" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label" for="Title">Tytuł:</label>
                            <div class="col-sm-10">
                                <InputText class="form-control" id="Title" @bind-Value="articleDto.Title" />
                                <ValidationMessage class="text-danger" For="@(() => articleDto.Title)" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label" for="Content">Zawartość:</label>
                            <div class="col-sm-10">
                                <RadzenHtmlEditor style="height: 300px;" @bind-Value="articleDto.Content" UploadUrl="@UploadImageUrl">
                                    <RadzenHtmlEditorUndo />
                                    <RadzenHtmlEditorRedo />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorBold />
                                    <RadzenHtmlEditorItalic />
                                    <RadzenHtmlEditorUnderline />
                                    <RadzenHtmlEditorStrikeThrough />
                                    <RadzenHtmlEditorSeparator />
                                    <RadzenHtmlEditorColor />
                                    <RadzenHtmlEditorBackground />
                                    <RadzenHtmlEditorImage />
                                    <RadzenHtmlEditorRemoveFormat />
                                </RadzenHtmlEditor>
                                <ValidationMessage class="text-danger" For="@(() => articleDto.Content)" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-sm-2 col-form-label" for="Image">Zdjęcie:</label>
                            <div class="col-sm-10">
                                <label class="btn btn-primary">
                                    Wybierz plik
                                    <InputFile OnChange="HandleFileChange" style="display:none;" />
                                </label>
                                <ValidationMessage For="@(() => articleDto.Image)" />
                            </div>
                        </div>

                        <div class="form-group row">
                            <div class="col-sm-10">
                                <button type="submit" class="btn btn-primary">Zapisz artykuł</button>
                            </div>
                        </div>
                    </EditForm>
                }
                else
                {
                    <h3>Zarejestrowano pomyślnie!</h3>
                    <p><a href="/login">Zaloguj się</a></p>
                }
            </div>

        </div>
    </div>
</section>

@code {
    private ArticleDto articleDto = new ArticleDto();
    private bool IsLoading = false;
    private bool IsSubmitted = false;
    private bool ShowErrorMessage = false;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task HandleValidSubmit()
    {
        ShowErrorMessage = false;
        IsLoading = true;
        await ArticleService.AddArticle(articleDto);
        IsLoading = false;
        IsSubmitted = true;
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            using (var stream = imageFile.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    articleDto.Image = memoryStream.ToArray();
                }
            }
        }
    }

    private string UploadImageUrl => Navigation.ToAbsoluteUri("/api/upload/image").ToString();
}
