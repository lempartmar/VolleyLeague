@page "/edit-profile/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@inject IUserService userService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using VolleyLeague.Shared.Dtos.Teams
@using Microsoft.AspNetCore.Components.Forms

@attribute [Authorize(Roles = "Admin,Player")]

<head>
    <link href="/assets/css/custom-edit-profile.css" rel="stylesheet" />
    <link href="/assets/css/custom-account.css" rel="stylesheet" />
</head>

@if (!pageReady)
{
    <section id="loading_section" class="loading_section mt-150">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Edytuj Profil</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@UserProfileData" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <h3>Dane osobowe</h3>
                        <div class="row margin-top-xs">
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputText id="FirstName" class="form-control" @bind-Value="UserProfileData.FirstName" placeholder="Imię" />
                                    <label for="FirstName">Imię</label>
                                    <ValidationMessage For="@(() => UserProfileData.FirstName)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputText id="LastName" class="form-control" @bind-Value="UserProfileData.LastName" placeholder="Nazwisko" />
                                    <label for="LastName">Nazwisko</label>
                                    <ValidationMessage For="@(() => UserProfileData.LastName)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputText id="City" class="form-control" @bind-Value="UserProfileData.City" placeholder="Miasto" />
                                    <label for="City">Miasto</label>
                                    <ValidationMessage For="@(() => UserProfileData.City)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputNumber id="BirthYear" class="form-control" @bind-Value="UserProfileData.BirthYear" placeholder="Rok urodzenia" />
                                    <label for="BirthYear">Rok urodzenia</label>
                                    <ValidationMessage For="@(() => UserProfileData.BirthYear)" />
                                </div>
                            </div>
                        </div>

                        <h3>Profil siatkarski</h3>
                        <div class="row margin-top-xs">
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputNumber id="JerseyNumber" class="form-control" @bind-Value="UserProfileData.JerseyNumber" placeholder="Numer koszulki" />
                                    <label for="JerseyNumber">Numer koszulki</label>
                                    <ValidationMessage For="@(() => UserProfileData.JerseyNumber)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputSelect id="PositionId" class="form-select" @bind-Value="UserProfileData.PositionId" placeholder="Pozycja">
                                        @foreach (var position in Positions)
                                        {
                                            <option value="@position.Id">@position.Name</option>
                                        }
                                    </InputSelect>
                                    <label for="PositionId">Pozycja</label>
                                    <ValidationMessage For="@(() => UserProfileData.PositionId)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputNumber id="BlockRange" class="form-control" @bind-Value="UserProfileData.BlockRange" placeholder="Zasięg w bloku (cm)" />
                                    <label for="BlockRange">Zasięg w bloku (cm)</label>
                                    <ValidationMessage For="@(() => UserProfileData.BlockRange)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputNumber id="AttackRange" class="form-control" @bind-Value="UserProfileData.AttackRange" placeholder="Zasięg w ataku (cm)" />
                                    <label for="AttackRange">Zasięg w ataku (cm)</label>
                                    <ValidationMessage For="@(() => UserProfileData.AttackRange)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputNumber id="Height" class="form-control" @bind-Value="UserProfileData.Height" placeholder="Wzrost" />
                                    <label for="Height">Wzrost</label>
                                    <ValidationMessage For="@(() => UserProfileData.Height)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputNumber id="Weight" class="form-control" @bind-Value="UserProfileData.Weight" placeholder="Waga" />
                                    <label for="Weight">Waga</label>
                                    <ValidationMessage For="@(() => UserProfileData.Weight)" />
                                </div>
                            </div>
                        </div>

                        <h3>Informacje dodatkowe</h3>
                        <div class="row margin-top-xs">
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputText id="VolleyballIdol" class="form-control" @bind-Value="UserProfileData.VolleyballIdol" placeholder="Idol siatkówki" />
                                    <label for="VolleyballIdol">Idol siatkówki</label>
                                    <ValidationMessage For="@(() => UserProfileData.VolleyballIdol)" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-4">
                                    <InputText id="Hobby" class="form-control" @bind-Value="UserProfileData.Hobby" placeholder="Hobby" />
                                    <label for="Hobby">Hobby</label>
                                    <ValidationMessage For="@(() => UserProfileData.Hobby)" />
                                </div>
                            </div>
                            <div class="col-md-12">
                                <div class="form-floating mb-4">
                                    <InputTextArea id="PersonalInfo" class="form-control" @bind-Value="UserProfileData.PersonalInfo" placeholder="Informacje dodatkowe" />
                                    <label for="PersonalInfo">Informacje dodatkowe</label>
                                    <ValidationMessage For="@(() => UserProfileData.PersonalInfo)" />
                                </div>
                            </div>
                        </div>

                        <h3>Zdjęcie</h3>
                        <div class="mb-4 margin-top-xs">
                            <label for="Photo" class="form-label">Zdjęcie:</label>
                            <label class="btn btn-primary">
                                Wybierz plik
                                <InputFile OnChange="HandleFileChange" style="display:none;" />
                            </label>
                            <ValidationMessage For="@(() => UserProfileData.Photo)" />
                        </div>

                        @if (!string.IsNullOrEmpty(FileName))
                        {
                            <div class="mb-3">
                                <small class="form-text text-muted">Załadowano plik: @FileName</small>
                            </div>
                        }

                        <div class="mb-4">
                            <button type="submit" class="btn btn-primary">Zapisz</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public UpdateUserDto UserProfileData { get; set; } = new UpdateUserDto();
    public List<PositionDto> Positions { get; set; } = new List<PositionDto>();
    private bool pageReady = false;
    private string FileName { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        pageReady = false;

        var userProfile = await userService.GetUserProfile(Id);
        if (userProfile != null)
        {
            UserProfileData = new UpdateUserDto
                {
                    FirstName = userProfile.FirstName,
                    LastName = userProfile.LastName,
                    City = userProfile.City,
                    PositionId = userProfile.PositionId ?? 0,
                    BirthYear = userProfile.BirthYear ?? 0,
                    Height = userProfile.Height ?? 0,
                    Weight = userProfile.Weight ?? 0,
                    JerseyNumber = userProfile.JerseyNumber ?? 0,
                    BlockRange = userProfile.BlockRange ?? 0,
                    AttackRange = userProfile.AttackRange ?? 0,
                    VolleyballIdol = userProfile.VolleyballIdol,
                    Hobby = userProfile.Hobby,
                    PersonalInfo = userProfile.PersonalInfo
                };
        }

        Positions = await userService.GetPositions();
        pageReady = true;
    }

    private async Task HandleValidSubmit()
    {
        await userService.UpdateUser(UserProfileData);
        Navigation.NavigateTo($"/account", true);
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var stream = imageFile.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    UserProfileData.Photo = memoryStream.ToArray();
                }
            }
            FileName = imageFile.Name;
        }
    }
}
