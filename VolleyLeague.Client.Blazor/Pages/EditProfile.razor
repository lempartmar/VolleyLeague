@page "/edit-profile/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@inject IUserService userService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@using VolleyLeague.Shared.Dtos.Teams
@using Microsoft.AspNetCore.Components.Forms

@attribute [Authorize(Roles = "Admin,Player")]

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Edytuj Profil</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@UserProfileData" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.FirstName" type="text" class="form-control" id="tt2" placeholder="Imię" required />
                            <span><label for="tt2">Imię</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.FirstName)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.LastName" type="text" class="form-control" id="tt2" placeholder="Nazwisko" required />
                            <span><label for="tt2">Nazwisko</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.LastName)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.City" type="text" class="form-control" id="tt2" placeholder="Miasto" />
                            <span><label for="tt2">Miasto</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.City)" />
                        </div>

                        <div class="form-label-group outline">
                            <select @bind="UserProfileData.PositionId" class="form-control" id="tt2">
                                @foreach (var position in Positions)
                                {
                                    <option value="@position.Id">@position.Name</option>
                                }
                            </select>
                            <span><label for="tt2">Pozycja</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.PositionId)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.BirthYear" type="number" class="form-control" id="tt2" placeholder="Rok urodzenia" />
                            <span><label for="tt2">Rok urodzenia</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.BirthYear)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.Height" type="number" class="form-control" id="tt2" placeholder="Wzrost" />
                            <span><label for="tt2">Wzrost</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.Height)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.Weight" type="number" class="form-control" id="tt2" placeholder="Waga" />
                            <span><label for="tt2">Waga</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.Weight)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.JerseyNumber" type="number" class="form-control" id="tt2" placeholder="Numer koszulki" />
                            <span><label for="tt2">Numer koszulki</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.JerseyNumber)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.BlockRange" type="number" class="form-control" id="tt2" placeholder="Zasięg w bloku (cm)" />
                            <span><label for="tt2">Zasięg w bloku (cm)</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.BlockRange)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.AttackRange" type="number" class="form-control" id="tt2" placeholder="Zasięg w ataku (cm)" />
                            <span><label for="tt2">Zasięg w ataku (cm)</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.AttackRange)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.VolleyballIdol" type="text" class="form-control" id="tt2" placeholder="Idol siatkówki" />
                            <span><label for="tt2">Idol siatkówki</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.VolleyballIdol)" />
                        </div>

                        <div class="form-label-group outline">
                            <input @bind="UserProfileData.Hobby" type="text" class="form-control" id="tt2" placeholder="Hobby" />
                            <span><label for="tt2">Hobby</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.Hobby)" />
                        </div>

                        <div class="form-label-group outline">
                            <textarea @bind="UserProfileData.PersonalInfo" class="form-control" id="tt2" placeholder="Informacje dodatkowe"></textarea>
                            <span><label for="tt2">Informacje dodatkowe</label></span>
                            <ValidationMessage class="text-danger" For="@(() => UserProfileData.PersonalInfo)" />
                        </div>

                        <div class="mb-3">
                            <label for="Photo" class="form-label">Zdjęcie:</label>
                            <label class="btn btn-primary">
                                Wybierz plik
                                <InputFile OnChange="HandleFileChange" style="display:none;" />
                            </label>
                            <ValidationMessage For="@(() => UserProfileData.Photo)" />
                        </div>

                        @if (!string.IsNullOrEmpty(FileName))
                        {
                            <div class="mb-3">
                                <small class="form-text text-muted">Załadowano plik: @FileName</small>
                            </div>
                        }

                        <div class="mb-3">
                            <button type="submit" class="btn btn-primary">Zapisz</button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Anuluj</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog-centered {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .modal-content {
        background: white;
        padding: 1em;
        max-width: 500px;
        width: 100%;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    .form-text.text-muted {
        margin-top: 0.5em;
    }

    .account-main {
        padding: 20px;
        background-color: #f9f9f9;
    }

    .section-title h2 {
        margin-bottom: 20px;
    }

    .login-form .card {
        margin-bottom: 20px;
    }

    .login-form .card-body {
        padding: 30px;
    }

    .form {
        margin-bottom: 15px;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    public UpdateUserDto UserProfileData { get; set; } = new UpdateUserDto();
    public List<PositionDto> Positions { get; set; } = new List<PositionDto>();
    private bool pageReady = false;
    private string FileName { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        pageReady = false;

        var userProfile = await userService.GetUserProfile(Id);
        if (userProfile != null)
        {
            UserProfileData = new UpdateUserDto
                {
                    FirstName = userProfile.FirstName,
                    LastName = userProfile.LastName,
                    City = userProfile.City,
                    PositionId = userProfile.PositionId ?? 0,
                    BirthYear = userProfile.BirthYear ?? 0,
                    Height = userProfile.Height ?? 0,
                    Weight = userProfile.Weight ?? 0,
                    JerseyNumber = userProfile.JerseyNumber ?? 0,
                    BlockRange = userProfile.BlockRange ?? 0,
                    AttackRange = userProfile.AttackRange ?? 0,
                    VolleyballIdol = userProfile.VolleyballIdol,
                    Hobby = userProfile.Hobby,
                    PersonalInfo = userProfile.PersonalInfo
                };
        }

        Positions = await userService.GetPositions();
        pageReady = true;
    }

    private async Task HandleValidSubmit()
    {
        await userService.UpdateUser(UserProfileData);
        Navigation.NavigateTo($"/account?section=UserProfile");
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            using (var stream = imageFile.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    UserProfileData.Photo = memoryStream.ToArray();
                }
            }
            FileName = imageFile.Name;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/user-profile/{Id}");
    }
}
