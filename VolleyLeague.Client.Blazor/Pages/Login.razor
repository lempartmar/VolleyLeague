@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider authStateProvider
@inject IUserService userService


@using System.Text.Json
@using System.Net.Http.Headers
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Entities.Dtos.Users
@using VolleyballBlazor.Client
@using VolleyballBlazor.Infrastructure.Client.Services

@page "/login"

<PageTitle>Logowanie</PageTitle>
<h3>Logowanie</h3>

@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<EditForm Model="user" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator />
    <fieldset disabled="@IsLoading">
        <div class="form-group col">
            <label for="email" class="col-md-2 col-form-label">Email:</label>
            <div class="col-md-10">
                <InputText id="email" class="form-control" @bind-Value="user.Login" />
                <ValidationMessage For="@(() => user.Login)" />
            </div>
        </div>

        <div class="form-group col">
            <label for="password" class="col-md-2 col-form-label">Hasło:</label>

            <div class="col-md-10">
                <InputText type="password" id="password" class="form-control" @bind-Value="user.Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
        </div>

        <div class="row mt-2">
            <div class="col-md-12 text-center">
                @if (!IsLoading)
                {
                    <button type="submit" class="btn btn-success">Login</button>
                }
                else
                {
                    <LoadingIcon />
                }
            </div>
        </div>
    </fieldset>
</EditForm>

<a href="/request-reset-password">Forgot password?</a>

@code {
    LoginDto user = new LoginDto();
    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;
    public bool ShowAuthError { get; set; }
    public string Error { get; set; } = "";
    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsync<string>("authToken");
        if (token != null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    public async System.Threading.Tasks.Task ExecuteLogin()
    {
        ShowAuthError = false;
        IsLoading = true;

        var content = JsonSerializer.Serialize(user);
        var bodyContent = new StringContent(content, Encoding.UTF8, "application/json");

        var authResult = await userService.Login(user);

        if (authResult.Success)
        {
            await localStorage.SetItemAsync("authToken", authResult.Data);
            ((AuthStateProvider)authStateProvider).NotifyUserAuthentication(authResult.Data!);
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", authResult.Data);
            NavigationManager.NavigateTo("/", forceLoad:true);
        }
        else
        {
            Error = authResult.Message;
            ShowAuthError = true;
        }

        IsLoading = false;
    }
}
