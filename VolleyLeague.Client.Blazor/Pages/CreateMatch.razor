@page "/createMatch"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Matches
@using VolleyLeague.Shared.Dtos.Teams
@inject IMatchOrganizerService matchOrganizerService
@inject ITeamService teamService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin")]

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Tworzenie meczu</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    <EditForm Model="NewMatch" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-floating mb-4">
                            <Select id="seasonSelect" class="form-control" @onchange="OnSeasonChanged">
                                @foreach (var season in NewMatch.SeasonList)
                                {
                                    <option value="@season.Id">@season.Name</option>
                                }
                            </Select>
                            <label for="seasonSelect">Sezon</label>
                            <ValidationMessage For="@(() => NewMatch.SeasonId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <Select id="RoundSelect" class="form-control" @onchange="OnRoundChanged">
                                @foreach (var round in NewMatch.RoundList)
                                {
                                    <option value="@round.Id">@round.Name</option>
                                }
                            </Select>
                            <label for="RoundSelect">Runda</label>
                            <ValidationMessage For="@(() => NewMatch.RoundId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <Select id="leagueSelect" class="form-control" @onchange="OnLeagueChanged">
                                @foreach (var league in NewMatch.LeagueList)
                                {
                                    <option value="@league.Id">@league.Name</option>
                                }
                            </Select>
                            <label for="leagueSelect">Liga</label>
                            <ValidationMessage For="@(() => NewMatch.LeagueId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <Select id="HomeTeam" class="form-control" @onchange="OnHomeTeamChanged">
                                @foreach (var team in NewMatch.HomeTeamList)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            </Select>
                            <label for="HomeTeam">Drużyna gospodarzy</label>
                            <ValidationMessage For="@(() => NewMatch.HomeTeamId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <Select id="GuestTeam" class="form-control"  @onchange="OnGuestTeamChanged">
                                @foreach (var team in NewMatch.GuestTeamList)
                                {
                                    <option value="@team.Id">@team.Name</option>
                                }
                            </Select>
                            <label for="GuestTeam">Drużyna gości</label>
                            <ValidationMessage For="@(() => NewMatch.GuestTeamId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <Select id="Referees" class="form-control" @onchange="OnRefereeChange">
                                @foreach (var referee in NewMatch.RefereeList)
                                {
                                    <option value="@referee.Id">@referee.Name</option>
                                }
                            </Select>
                            <label for="Referees">Sędzia</label>
                            <ValidationMessage For="@(() => NewMatch.RefereeId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <Select id="Venues" class="form-control"  @onchange="OnVenueChange">
                                @foreach (var venue in NewMatch.VenueList)
                                {
                                    <option value="@venue.Id">@venue.Name</option>
                                }
                            </Select>
                            <label for="Venues">Miejsce Meczu</label>
                            <ValidationMessage For="@(() => NewMatch.VenueId)" />
                        </div>

                        <div class="form-floating mb-4">
                            <input type="datetime-local" id="scheduleDateTime" class="form-control" @bind="NewMatch.Schedule" />
                            <label for="scheduleDateTime">Data i czas</label>
                            <ValidationMessage For="@(() => NewMatch.Schedule)" />
                        </div>

                        <div class="mb-4">
                            <button type="submit" class="btn btn-primary">Utwórz</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    .account-main {
        padding: 20px;
        background-color: #f9f9f9;
    }

    .section-title h2 {
        margin-bottom: 20px;
    }

    .login-form .card {
        margin-bottom: 20px;
    }

    .login-form .card-body {
        padding: 30px;
    }

    .form {
        margin-bottom: 15px;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .text-center {
        text-align: center;
    }

    .form-label {
        display: block;
        width: 100%;
    }

    .form-floating {
        position: relative;
    }

    .form-floating > .form-control,
    .form-floating > .form-select {
        height: calc(3.5rem + 2px);
        padding: 1rem .75rem;
    }

    .form-floating > label {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        padding: 1rem .75rem;
        pointer-events: none;
        border: 1px solid transparent;
        transform-origin: 0 0;
        transition: opacity .1s ease-in-out, transform .1s ease-in-out;
    }

    .form-floating > .form-control:focus,
    .form-floating > .form-control:not(:placeholder-shown),
    .form-floating > .form-select:focus,
    .form-floating > .form-select:not(:placeholder-shown) {
        padding-top: 1.625rem;
        padding-bottom: .625rem;
    }

    .form-floating > .form-control:focus~label,
    .form-floating > .form-control:not(:placeholder-shown)~label,
    .form-floating > .form-select:focus~label,
    .form-floating > .form-select:not(:placeholder-shown)~label {
        opacity: .65;
        transform: scale(.85) translateY(-.5rem) translateX(.15rem);
    }
</style>

@code {
    private NewMatchModel NewMatch = new NewMatchModel();
    private NewMatchDto NewMatchDto = new NewMatchDto();
    private List<RoundDto> AllRounds { get; set; } = new List<RoundDto>();
    private List<TeamSummaryDto> AllTeams { get; set; } = new List<TeamSummaryDto>();

    private bool pageReady = false;
    private string loadingError = "";

    private bool submitLoading = false;
    private string submitError = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var seasonsResult = await matchOrganizerService.GetSeasons();
            NewMatch.SeasonList = seasonsResult;
            NewMatch.SeasonId = NewMatch.SeasonList.FirstOrDefault()?.Id ?? 0;

            var roundsResult = await matchOrganizerService.GetRounds();
            AllRounds = roundsResult;
            NewMatch.RoundList = AllRounds.Where(r => r.SeasonId == NewMatch.SeasonId).ToList();
            NewMatch.RoundId = NewMatch.RoundList.FirstOrDefault()?.Id ?? 0;

            var leaguesResult = await matchOrganizerService.GetLeagues();
            NewMatch.LeagueList = leaguesResult;
            NewMatch.LeagueId = NewMatch.LeagueList.FirstOrDefault()?.Id ?? 0;

            var refereesResult = await matchOrganizerService.GetReferees();
            NewMatch.RefereeList = refereesResult;

            var teamsResult = await teamService.GetAllTeams();
            AllTeams = teamsResult;
            await LoadTeamsForRound();

            var venueResult = await matchOrganizerService.GetVenues();
            NewMatch.VenueList = venueResult;
            NewMatch.VenueId = NewMatch.VenueList.FirstOrDefault()?.Id ?? 0;

            pageReady = true;
        }
        catch (Exception ex)
        {
            loadingError = $"Błąd podczas ładowania danych: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        submitLoading = true;

        NewMatchDto.Schedule = NewMatch.Schedule;

        NewMatchDto.SeasonId = NewMatch.SeasonId;
        NewMatchDto.RoundId = NewMatch.RoundId;
        NewMatchDto.LeagueId = NewMatch.LeagueId;
        NewMatchDto.HomeTeamId = NewMatch.HomeTeamId;
        NewMatchDto.GuestTeamId = NewMatch.GuestTeamId;
        NewMatchDto.RefereeId = NewMatch.RefereeId;
        NewMatchDto.VenueId = NewMatch.VenueId;

        var submitResult = await matchOrganizerService.CreateMatch(NewMatchDto);

        if (submitResult)
        {
            NavigationManager.NavigateTo("/createMatch");
        }
        else
        {
            submitError = "Wystąpił błąd podczas tworzenia meczu.";
        }

        submitLoading = false;
    }

    private async Task LoadTeamsForRound()
    {
        var teamsInRound = await matchOrganizerService.GetTeamsInRound(NewMatch.RoundId);
        var teamsInRoundSet = new HashSet<int>(teamsInRound);
        NewMatch.HomeTeamList = AllTeams
            .Where(t => t.LeagueId == NewMatch.LeagueId && !teamsInRoundSet.Contains(t.Id))
            .ToList();
        NewMatch.HomeTeamId = NewMatch.HomeTeamList.FirstOrDefault()?.Id ?? 0;
        NewMatch.GuestTeamList = NewMatch.HomeTeamList
            .Where(t => t.Id != NewMatch.HomeTeamId)
            .ToList();
        NewMatch.GuestTeamId = NewMatch.GuestTeamList.FirstOrDefault()?.Id ?? 0;
    }

    private void HandleInvalidSubmit()
    {

    }

    private async Task OnSeasonChanged(ChangeEventArgs e)
    {
        NewMatch.SeasonId = Convert.ToInt32(e.Value.ToString());
        NewMatch.RoundList = AllRounds.Where(r => r.SeasonId == NewMatch.SeasonId).ToList();
        NewMatch.RoundId = NewMatch.RoundList.FirstOrDefault()?.Id ?? 0;
        await LoadTeamsForRound();
    }

    private async Task OnLeagueChanged(ChangeEventArgs e)
    {
        NewMatch.LeagueId = Convert.ToInt32(e.Value.ToString());
        await LoadTeamsForRound();
    }

    private async Task OnGuestTeamChanged(ChangeEventArgs e)
    {
        NewMatch.GuestTeamId = Convert.ToInt32(e.Value.ToString());
    }

    private async Task OnHomeTeamChanged(ChangeEventArgs e)
    {
        NewMatch.HomeTeamId = Convert.ToInt32(e.Value.ToString());
        NewMatch.GuestTeamList = NewMatch.HomeTeamList.Where(t => t.Id != NewMatch.HomeTeamId).ToList();
        NewMatch.GuestTeamId = NewMatch.GuestTeamList.FirstOrDefault()?.Id ?? 0;
    }

    private async Task OnRoundChanged(ChangeEventArgs e)
    {
        NewMatch.RoundId = Convert.ToInt32(e.Value.ToString());
        await LoadTeamsForRound();
    }

    private async Task OnRefereeChange(ChangeEventArgs e)
    {
        NewMatch.RefereeId = Convert.ToInt32(e.Value.ToString());
    }

    private async Task OnVenueChange(ChangeEventArgs e)
    {
        NewMatch.VenueId = Convert.ToInt32(e.Value.ToString());
    }
}
