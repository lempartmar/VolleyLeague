@page "/standings"
@inject IMatchService matchService
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Entities.Dtos.Matches
@using VolleyLeague.Entities.Dtos.Teams

@if (!pageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <section class="category_section">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="mobile">
                        <div class="article_title header_purple">
                            <h2>Tabela</h2>
                        </div>
                        @if (pageReady)
                        {
                            <div class="card m-2 p-2">
                                <EditForm Model="Filter">
                                    <div class="form-group btn-group">
                                        <label for="seasonSelect" class="btn btn-default btn-label">SEZON:</label>
                                        <Select value="@Filter.SeasonId" @onchange="OnSeasonChanged" class="btn btn-default dropdown-toggle">
                                            @foreach (var season in Filter.SeasonList)
                                            {
                                                <option value="@season.Id">@season.Name</option>
                                            }
                                        </Select>
                                    </div>
                                    <div class="form-group btn-group">
                                        <label for="leagueSelect" class="btn btn-default btn-label">LIGA:</label>
                                        <Select value="@Filter.LeagueId" @onchange="OnLeagueChanged" class="btn btn-default dropdown-toggle">
                                            @foreach (var league in Filter.LeagueList)
                                            {
                                                <option value="@league.Id">@league.Name</option>
                                            }
                                        </Select>
                                    </div>
                                </EditForm>
                            </div>

                            @if (standingsLoading)
                            {
                                <div class="d-flex justify-content-center">
                                    <div id="spinner"></div>
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(standingsErrorMessage))
                            {
                                <div class="alert alert-danger">
                                    @standingsErrorMessage
                                </div>
                            }
                            else if (StandingsList.Count == 0)
                            {
                                <div class="alert alert-info" role="alert">
                                    Brak tabeli do wyświetlenia dla wybranej ligi i sezonu.
                                </div>
                            }
                            else if (StandingsList.Count > 0)
                            {
                                <div class="p-2 card mt-4 mb-5 table-responsive-lg" style="margin-top: 25px">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th rowspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Lp</th>
                                                <th rowspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Drużyna</th>
                                                <th rowspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Punkty</th>
                                                <th colspan="3" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Mecze</th>
                                                <th colspan="6" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Rodzaj wyniku</th>
                                                <th colspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Sety</th>
                                                <th colspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Punkty</th>
                                                <th rowspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Stosunek setów</th>
                                                <th rowspan="2" style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Stosunek punktów</th>
                                            </tr>
                                            <tr>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Rozegrane</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Wygrane</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Przegrane</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">3:0</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">3:1</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">3:2</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">2:3</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">1:3</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">0:3</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Wygrane</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Przegrane</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Wygrane</th>
                                                <th style="text-align: center; color: black; border-bottom: 1px solid #ddd;">Przegrane</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                int rank = 1;
                                            }
                                            @foreach (var team in StandingsList)
                                            {
                                                <tr style="">
                                                    <!-- Dodajemy przerywaną linię pod każdym wierszem -->
                                                    <td style="vertical-align: middle;">@rank</td>
                                                    <td>
                                                        @{
                                                            var imgSrc = team.Team.Logo != null ? $"data:image/png;base64,{Convert.ToBase64String(team.Team.Logo)}" : "/assets/img/Logo_alternative.png";
                                                        }
                                                        <div style="display: flex; align-items: center;">
                                                            <img src="@imgSrc" alt="Logo" style="width: 30px; height: 30px; margin-right: 10px;">
                                                            <a href="/team/@team.Team.Id/" class="team-link" style="color: #0268d6;">@team.Team.Name</a>
                                                        </div>
                                                    </td>
                                                    <td style="vertical-align: middle; text-align: center;">@team.Points</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.MatchesPlayed</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.MatchesWon</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.MatchesLost</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.Score3_0</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.Score3_1</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.Score3_2</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.Score2_3</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.Score1_3</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.Score0_3</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.SetsWon</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.SetsLost</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.PointsWon</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.PointsLost</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.SetsRatio.ToString("0.00")</td>
                                                    <td style="vertical-align: middle;text-align: center;">@team.BallsRatio.ToString("0.00")</td>
                                                </tr>
                                                rank++;
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="d-flex justify-content-center">
                                <div id="spinner"></div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</section>
}

<style>
    .btn-label {
        background: none;
        border: none;
        padding: 6px 12px;
        font-weight: bold;
        color: #555;
        text-align: left;
    }

    .dropdown-toggle {
        background: #fff;
        border: 1px solid #ccc;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }

    .card {
        margin-bottom: 50px;
    }

    .btn.btn-default.dropdown-toggle {
        background: #e5e7eb;
        font-size: 12px;
        color: black;
        font-weight: bold;
        text-align: left;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }
</style>

@code {
    private bool pageReady = false;
    private bool standingsLoading = false;
    private string standingsErrorMessage = "";
    private List<StandingsDto> StandingsList = new List<StandingsDto>();
    private ScheduleFilter Filter = new ScheduleFilter();

    private class ScheduleFilter
    {
        public int SeasonId { get; set; }
        public int LeagueId { get; set; }
        public List<SeasonDto> SeasonList { get; set; } = new List<SeasonDto>();
        public List<LeagueDto> LeagueList { get; set; } = new List<LeagueDto>();

        public ScheduleFilter()
        {
            SeasonId = 37;
            LeagueId = 1;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        standingsLoading = true;
        StandingsList = await matchService.GetStandings(37, 1);
        standingsLoading = false;

        await LoadInitialDataAsync();
    }

    private async Task LoadInitialDataAsync()
    {
        Filter.SeasonList = (await matchService.GetSeasons()).OrderByDescending(s => s.Id).ToList();
        Filter.LeagueList = await matchService.GetLeagues();
        pageReady = true;
    }

    private async Task OnSeasonOrLeagueChanged(ChangeEventArgs e, bool isSeason)
    {
        var selectedId = Convert.ToInt32(e.Value.ToString());
        if (isSeason)
        {
            Filter.SeasonId = selectedId;
        }
        else
        {
            Filter.LeagueId = selectedId;
        }

        await ApplyFilter();
    }

    private async Task ApplyFilter()
    {
        standingsLoading = true;
        StandingsList = await matchService.GetStandings(Filter.SeasonId, Filter.LeagueId);
        if (StandingsList == null || StandingsList.Count == 0)
        {
            standingsErrorMessage = "Brak danych dla wybranych kryteriów.";
        }
        else
        {
            standingsErrorMessage = string.Empty;
        }
        standingsLoading = false;
    }

    private EventCallback<ChangeEventArgs> OnSeasonChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.SeasonId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });

    private EventCallback<ChangeEventArgs> OnLeagueChanged => EventCallback.Factory.Create<ChangeEventArgs>(this, async e =>
    {
        Filter.LeagueId = Convert.ToInt32(e.Value.ToString());
        await ApplyFilter();
    });
}
