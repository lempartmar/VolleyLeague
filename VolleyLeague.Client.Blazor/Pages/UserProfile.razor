@page "/account/userprofile/{Id:int?}"
@layout AccountLayout
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Discussion
@using VolleyLeague.Shared.Dtos.Teams

@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

@* @attribute [Authorize(Roles = "Admin,Player")] *@
@if (!PageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Profil Użytkownika</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    @if (UserProfileData != null)
                    {

                        
                        <div class="text-center">
                            @{
                                var imgSrc = UserProfileData.Photo != null && UserProfileData.Photo.Length > 0
                                ? $"data:image/png;base64,{Convert.ToBase64String(UserProfileData.Photo)}"
                                : "/assets/images/Logo_alternative.png";
                            }
                            <img src="@imgSrc" class="user-profile-image">
                            <table class="table table-striped">
                                <tbody>
                                    <tr>
                                        <th>Imię i nazwisko</th>
                                        <td>@(string.IsNullOrWhiteSpace(UserProfileData.FirstName) || string.IsNullOrWhiteSpace(UserProfileData.LastName) ? "-" : $"{UserProfileData.FirstName} {UserProfileData.LastName}")</td>
                                    </tr>
                                    <tr>
                                        <th>Pozycja</th>
                                        <td>@(string.IsNullOrWhiteSpace(UserProfileData.PositionName) ? "-" : UserProfileData.PositionName)</td>
                                    </tr>
                                    <tr>
                                        <th>Rok urodzenia</th>
                                        <td>@(UserProfileData.BirthYear == 0 ? "-" : UserProfileData.BirthYear.ToString())</td>
                                    </tr>
                                    <tr>
                                        <th>Miasto</th>
                                        <td>@(string.IsNullOrWhiteSpace(UserProfileData.City) ? "-" : UserProfileData.City)</td>
                                    </tr>
                                    <tr>
                                        <th>Płeć</th>
                                        <td>@(UserProfileData.Gender.HasValue ? (UserProfileData.Gender.Value ? "Mężczyzna" : "Kobieta") : "-")</td>
                                    </tr>
                                    <tr>
                                        <th>Wzrost</th>
                                        <td>@(UserProfileData.Height == 0 ? "-" : $"{UserProfileData.Height} cm")</td>
                                    </tr>
                                    <tr>
                                        <th>Waga</th>
                                        <td>@(UserProfileData.Weight == 0 ? "-" : $"{UserProfileData.Weight} kg")</td>
                                    </tr>
                                    <tr>
                                        <th>Numer koszulki</th>
                                        <td>@(UserProfileData.JerseyNumber == 0 ? "-" : UserProfileData.JerseyNumber.ToString())</td>
                                    </tr>
                                    <tr>
                                        <th>Zasięg w bloku</th>
                                        <td>@(UserProfileData.BlockRange == 0 ? "-" : $"{UserProfileData.BlockRange} cm")</td>
                                    </tr>
                                    <tr>
                                        <th>Zasięg w ataku</th>
                                        <td>@(UserProfileData.AttackRange == 0 ? "-" : $"{UserProfileData.AttackRange} cm")</td>
                                    </tr>
                                    <tr>
                                        <th>Idol siatkówki</th>
                                        <td>@(string.IsNullOrWhiteSpace(UserProfileData.VolleyballIdol) ? "-" : UserProfileData.VolleyballIdol)</td>
                                    </tr>
                                    <tr>
                                        <th>Hobby</th>
                                        <td>@(string.IsNullOrWhiteSpace(UserProfileData.Hobby) ? "-" : UserProfileData.Hobby)</td>
                                    </tr>
                                    <tr>
                                        <th>Informacje dodatkowe</th>
                                        <td>@(string.IsNullOrWhiteSpace(UserProfileData.PersonalInfo) ? "-" : UserProfileData.PersonalInfo)</td>
                                    </tr>
                                </tbody>
                            </table>

                            <div class="p-2" style="margin-top: 25px">
                                <h3>Drużyna użytkownika</h3>
                                <table class="table table-striped">
                                    <tbody>
                                        <tr>
                                            <th>Nazwa drużyny</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.TeamName) ? "-" : UserProfileData.TeamName)</td>
                                        </tr>
                                    </tbody>
                                </table>
                                @if (!string.IsNullOrWhiteSpace(UserProfileData.TeamName))
                                {
                                    <button class="btn btn-danger" @onclick="ShowLeaveTeamConfirmation">Opuść drużynę</button>
                                }
                                else
                                {
                                    <div class="alert alert-info" role="alert">
                                        Użytkownik nie należy do żadnej drużyny.
                                    </div>
                                    <div class="p-2" style="margin-top: 25px">
                                        <h3>Zaproszenia do drużyny</h3>
                                        @if (HasTeamInvitations != null && HasTeamInvitations.Status)
                                        {
                                            <div>
                                                Masz zaproszenie do drużyny: @HasTeamInvitations.TeamName;
                                            </div>
                                            <button class="btn btn-primary" @onclick="() => MergeAccount(UserProfileData.AdditionalEmail)">Dołącz do drużyny</button>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info" role="alert">
                                                Użytkownik nie ma zaproszeń do drużyny.
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            @if (!string.IsNullOrEmpty(ErrorMessage))
                            {
                                <div class="alert alert-danger" style="margin-top: 30px;" role="alert">
                                    @ErrorMessage
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <LoadingIcon />
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal for leave team confirmation -->
<div class="modal" tabindex="-1" role="dialog" style="@(ShowLeaveModal ? "display:block" : "display:none")">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdzenie opuszczenia drużyny</h5>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz opuścić drużynę?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideLeaveTeamConfirmation">Anuluj</button>
                <button class="btn btn-danger" @onclick="ConfirmLeaveTeam">Opuść</button>
            </div>
        </div>
    </div>
</div>

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog-centered {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
    }

    .modal-content {
        background: white;
        padding: 1em;
        max-width: 500px;
        width: 100%;
    }

    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    .form-text.text-muted {
        margin-top: 0.5em;
    }

    .account-main {
        padding: 20px;
        background-color: #f9f9f9;
    }

    .section-title h2 {
        margin-bottom: 20px;
    }

    .login-form .card {
        margin-bottom: 20px;
    }

    .login-form .card-body {
        padding: 30px;
    }

    .form {
        margin-bottom: 15px;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }
</style>

@code {
    [Parameter]
    public int? Id { get; set; }

    public UserProfileDto? UserProfileData { get; set; }

    public List<CommentDto> ProfileComments { get; set; } = new List<CommentDto>();

    public NewCommentDto commentModel { get; set; } = null!;

    public string ErrorMessage { get; set; } = "";

    public string CommentsError { get; set; } = "";

    public bool SubmitLoading { get; set; } = false;

    public string NewCommentError { get; set; } = "";

    public TeamsToMergeDto HasTeamInvitations { get; set; } = new TeamsToMergeDto();

    public string TeamNameForInvitation { get; set; } = "";

    public bool IsLoading { get; set; } = false;

    public bool ShowLeaveModal { get; set; } = false;

    public bool PageReady { get; set; } = true;

    protected override async void OnParametersSet()
    {
        UserProfileData = await GetUserProfile();

        if (UserProfileData?.AdditionalEmail != null)
        {
            HasTeamInvitations = await CheckTeamInvitations(UserProfileData.AdditionalEmail);

            if (HasTeamInvitations.Status)
            {
                TeamNameForInvitation = await GetTeamNameForInvitation(UserProfileData.AdditionalEmail);
            }
        }

        StateHasChanged();
        base.OnParametersSet();
    }

    public async Task<UserProfileDto?> GetUserProfile()
    {
        var response = await userService.GetUserProfile(Id ?? 0);
        return response;
    }

    private async Task<TeamsToMergeDto> CheckTeamInvitations(string email)
    {
        try
        {
            return await teamService.GetHasAccountsForMerging(email);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Wystąpił błąd podczas sprawdzania zaproszeń do drużyny: {ex.Message}";
            Console.WriteLine(ErrorMessage);
            return new TeamsToMergeDto();
        }
    }

    private async Task<string> GetTeamNameForInvitation(string email)
    {
        try
        {
            string name = await teamService.GetInfoAboutTeamsToMerge(email);
            return name;
        }
        catch (Exception ex)
        {
            return "";
        }
    }

    private async Task MergeAccount(string? email)
    {
        if (!string.IsNullOrEmpty(email))
        {
            try
            {
                PageReady = false;
                var result = await teamService.AccountMerging(email);
                if (result)
                {
                    NavigationManager.NavigateTo($"/account/userprofile/{Id}", forceLoad: true);
                }
                else
                {
                    ErrorMessage = "Nie udało się połączyć kont.";
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Wystąpił błąd podczas łączenia kont: {ex.Message}";
                Console.WriteLine(ErrorMessage);
            }
            finally
            {
                PageReady = true;
            }
        }
    }

    private async Task LeaveTeam()
    {
        if (UserProfileData?.AdditionalEmail != null)
        {
            try
            {
                PageReady = false;
                var result = await teamService.LeaveTeamByEmail(UserProfileData.AdditionalEmail);
                if (result.Success)
                {
                    NavigationManager.NavigateTo($"/account/userprofile/{Id}", forceLoad: true);
                }
                else
                {
                    ErrorMessage = result.Message;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Wystąpił błąd podczas opuszczania drużyny: {ex.Message}";
                Console.WriteLine(ErrorMessage);
            }
            finally
            {
                PageReady = true;
            }
        }
    }

    private void ShowLeaveTeamConfirmation()
    {
        ShowLeaveModal = true;
    }

    private void HideLeaveTeamConfirmation()
    {
        ShowLeaveModal = false;
    }

    private async Task ConfirmLeaveTeam()
    {
        ShowLeaveModal = false;
        await LeaveTeam();
    }

    private string GetLogoSrc(byte[] logo)
    {
        if (logo != null && logo.Length > 0)
        {
            return $"data:image/png;base64,{Convert.ToBase64String(logo)}";
        }
        else
        {
            return "/assets/img/Logo_alternative.png";
        }
    }

    private void NavigateToEditProfile()
    {
        NavigationManager.NavigateTo($"/edit-profile/{Id}");
    }
}
