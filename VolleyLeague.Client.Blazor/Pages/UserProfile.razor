@page "/user-profile/0"
@page "/user-profile/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using VolleyLeague.Shared.Dtos.Discussion
@using VolleyLeague.Shared.Dtos.Teams

@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin,Player")]

<section class="category_section">
    <div class="container">
        <div class="row">
            <div class="d-flex flex-row justify-content-center" style="margin-top: 30px;">
                @if (UserProfileData != null)
                {
                    <div class="text-center" style="max-width: 750px; display: contents;">
                        <div class="d-flex flex-row justify-content-center" style="display: flex;justify-content: center;flex-direction: column;">
                            <div class="mr-5"></div>
                            <div class="p-2">
                                <h2>Profil Użytkownika</h2>
                                <img src="@GetLogoSrc(UserProfileData.Photo)" style="width: 300px; height: 400px; margin-bottom: 30px">
                                <table class="table">
                                    <tbody>
                                        <tr>
                                            <th>Imię i nazwisko</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.FirstName) || string.IsNullOrWhiteSpace(UserProfileData.LastName) ? "-" : $"{UserProfileData.FirstName} {UserProfileData.LastName}")</td>
                                        </tr>
                                        <tr>
                                            <th>Pozycja</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.PositionName) ? "-" : UserProfileData.PositionName)</td>
                                        </tr>
                                        <tr>
                                            <th>Rok urodzenia</th>
                                            <td>@(UserProfileData.BirthYear == 0 ? "-" : UserProfileData.BirthYear.ToString())</td>
                                        </tr>
                                        <tr>
                                            <th>Miasto</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.City) ? "-" : UserProfileData.City)</td>
                                        </tr>
                                        <tr>
                                            <th>Płeć</th>
                                            <td>@(UserProfileData.Gender.HasValue ? (UserProfileData.Gender.Value ? "Mężczyzna" : "Kobieta") : "-")</td>
                                        </tr>
                                        <tr>
                                            <th>Wzrost</th>
                                            <td>@(UserProfileData.Height == 0 ? "-" : $"{UserProfileData.Height} cm")</td>
                                        </tr>
                                        <tr>
                                            <th>Waga</th>
                                            <td>@(UserProfileData.Weight == 0 ? "-" : $"{UserProfileData.Weight} kg")</td>
                                        </tr>
                                        <tr>
                                            <th>Numer koszulki</th>
                                            <td>@(UserProfileData.JerseyNumber == 0 ? "-" : UserProfileData.JerseyNumber.ToString())</td>
                                        </tr>
                                        <tr>
                                            <th>Zasięg w bloku</th>
                                            <td>@(UserProfileData.BlockRange == 0 ? "-" : $"{UserProfileData.BlockRange} cm")</td>
                                        </tr>
                                        <tr>
                                            <th>Zasięg w ataku</th>
                                            <td>@(UserProfileData.AttackRange == 0 ? "-" : $"{UserProfileData.AttackRange} cm")</td>
                                        </tr>
                                        <tr>
                                            <th>Idol siatkówki</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.VolleyballIdol) ? "-" : UserProfileData.VolleyballIdol)</td>
                                        </tr>
                                        <tr>
                                            <th>Hobby</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.Hobby) ? "-" : UserProfileData.Hobby)</td>
                                        </tr>
                                        <tr>
                                            <th>Informacje dodatkowe</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.PersonalInfo) ? "-" : UserProfileData.PersonalInfo)</td>
                                        </tr>
                                    </tbody>
                                </table>

                                <button class="btn btn-primary" @onclick="NavigateToEditProfile">Edytuj Profil</button>
                            </div>
                            <div class="p-2" style="margin-top: 25px">
                                <h2>Drużyna użytkownika</h2>
                                <table class="table">
                                    <tbody>
                                        <tr>
                                            <th>Nazwa drużyny</th>
                                            <td>@(string.IsNullOrWhiteSpace(UserProfileData.TeamName) ? "-" : UserProfileData.TeamName)</td>
                                        </tr>
                                    </tbody>
                                </table>
                                @if (!string.IsNullOrWhiteSpace(UserProfileData.TeamName))
                                {
                                    <button class="btn btn-danger" @onclick="ShowLeaveTeamConfirmation">Opuść drużynę</button>
                                }
                                else
                                {
                                    <div class="alert alert-info" role="alert">
                                        Użytkownik nie należy do żadnej drużyny.
                                    </div>
                                    <div class="p-2" style="margin-top: 25px">
                                        <h2>Zaproszenia do drużyny</h2>
                                        @if (HasTeamInvitations != null && HasTeamInvitations.Status)
                                        {
                                            <div>
                                                Ma zaproszenie do drużyny: @HasTeamInvitations.TeamName;
                                            </div>
                                            <button class="btn btn-primary" @onclick="() => MergeAccount(UserProfileData.AdditionalEmail)">Dołącz do drużyny</button>
                                        }
                                        else
                                        {
                                            <div class="alert alert-info" role="alert">
                                                Użytkownik nie ma zaproszeń do drużyny.
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    @if (!string.IsNullOrEmpty(Error))
                    {
                        <div class="alert alert-danger" role="alert">
                            @Error
                        </div>
                    }
                    else
                    {
                        <LoadingIcon />
                    }
                }
            </div>
        </div>
    </div>
</section>

<!-- Modal for leave team confirmation -->
<div class="modal" tabindex="-1" role="dialog" style="@(ShowLeaveModal ? "display:block" : "display:none")">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdzenie opuszczenia drużyny</h5>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz opuścić drużynę?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideLeaveTeamConfirmation">Anuluj</button>
                <button class="btn btn-danger" @onclick="ConfirmLeaveTeam">Opuść</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public UserProfileDto? UserProfileData { get; set; }

    public List<CommentDto> ProfileComments { get; set; } = new List<CommentDto>();

    public NewCommentDto commentModel { get; set; } = null!;

    public string Error { get; set; } = "";

    public string CommentsError { get; set; } = "";

    public bool SubmitLoading { get; set; } = false;

    public string NewCommentError { get; set; } = "";

    public TeamsToMergeDto HasTeamInvitations { get; set; } = new TeamsToMergeDto();

    public string TeamNameForInvitation { get; set; } = "";

    public bool IsLoading { get; set; } = false;

    public bool ShowLeaveModal { get; set; } = false;

    protected override async void OnParametersSet()
    {
        UserProfileData = await GetUserProfile();

        if (UserProfileData?.AdditionalEmail != null)
        {
            HasTeamInvitations = await CheckTeamInvitations(UserProfileData.AdditionalEmail);

            if (HasTeamInvitations.Status)
            {
                TeamNameForInvitation = await GetTeamNameForInvitation(UserProfileData.AdditionalEmail);
            }
        }

        StateHasChanged();
        base.OnParametersSet();
    }

    public async Task<UserProfileDto?> GetUserProfile()
    {
        var response = await userService.GetUserProfile(Id);
        return response;
    }

    private async Task<TeamsToMergeDto> CheckTeamInvitations(string email)
    {
        try
        {
            return await teamService.GetHasAccountsForMerging(email);
        }
        catch (Exception ex)
        {
            Error = $"An error occurred while checking team invitations: {ex.Message}";
            Console.WriteLine(Error);
            return new TeamsToMergeDto();
        }
    }

    private async Task<string> GetTeamNameForInvitation(string email)
    {
        try
        {
            string name = await teamService.GetInfoAboutTeamsToMerge(email);
            return name;
        }
        catch (Exception ex)
        {
            Error = $"An error occurred while getting team name for invitation: {ex.Message}";
            Console.WriteLine(Error);
            return "";
        }
    }

    private async Task MergeAccount(string? email)
    {
        if (!string.IsNullOrEmpty(email))
        {
            try
            {
                IsLoading = true;
                var result = await teamService.AccountMerging(email);
                IsLoading = false;
                if (result)
                {
                    // Handle success (e.g., display a success message, reload data, etc.)
                    NavigationManager.NavigateTo($"/user-profile/{Id}", forceLoad: true);
                }
                else
                {
                    // Handle failure (e.g., display an error message)
                    Error = "Failed to merge accounts.";
                }
            }
            catch (Exception ex)
            {
                IsLoading = false;
                Error = $"An error occurred while merging accounts: {ex.Message}";
                Console.WriteLine(Error);
            }
        }
    }

    private async Task LeaveTeam()
    {
        if (UserProfileData?.AdditionalEmail != null)
        {
            try
            {
                IsLoading = true;
                var result = await teamService.LeaveTeamByEmail(UserProfileData.AdditionalEmail);
                IsLoading = false;
                if (result.Success)
                {
                    // Handle success (e.g., display a success message, reload data, etc.)
                    NavigationManager.NavigateTo($"/user-profile/{Id}", forceLoad: true);
                }
                else
                {
                    // Handle failure (e.g., display an error message)
                    Error = result.Message;
                }
            }
            catch (Exception ex)
            {
                IsLoading = false;
                Error = $"An error occurred while leaving the team: {ex.Message}";
                Console.WriteLine(Error);
            }
        }
    }

    private void ShowLeaveTeamConfirmation()
    {
        ShowLeaveModal = true;
    }

    private void HideLeaveTeamConfirmation()
    {
        ShowLeaveModal = false;
    }

    private async Task ConfirmLeaveTeam()
    {
        ShowLeaveModal = false;
        await LeaveTeam();
    }

    private string GetLogoSrc(byte[] logo)
    {
        if (logo != null && logo.Length > 0)
        {
            return $"data:image/png;base64,{Convert.ToBase64String(logo)}";
        }
        else
        {
            return "/assets/img/Logo_alternative.png";
        }
    }

    private void NavigateToEditProfile()
    {
        NavigationManager.NavigateTo($"/edit-profile/{Id}");
    }
}
