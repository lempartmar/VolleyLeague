@page "/ManageTeam"
@using Microsoft.AspNetCore.Authorization
@using VolleyLeague.Client.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using VolleyLeague.Shared.Dtos.Teams
@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime JSRuntime

@attribute [Authorize(Roles = "Admin,Player")]

@if (!PageReady)
{
    <section id="loading_section" style="margin-top: 150px" class="loading_section">
        <div class="container">
            <div id="spinner"></div>
        </div>
    </section>
}
else
{
    <div class="account-main accountdtls filterd-items">
        <div class="login-form">
            <div class="section-title">
                <h2>Zarządzanie drużyną: @(Team?.Name ?? "Unknown")</h2>
            </div>
            <div class="card">
                <div class="card-body">
                    <EditForm Model="@ManagedTeam" OnValidSubmit="HandleValidSubmit" style="width: 100%">
                        <DataAnnotationsValidator />
                        <div class="form-floating mb-4">
                            <InputText id="Email" class="form-control" @bind-Value="ManagedTeam.Email" placeholder="Email drużynowy" />
                            <label class="text-center" for="Email">Email drużynowy</label>
                            <ValidationMessage For="@(() => ManagedTeam.Email)" class="text-danger" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText id="Phone" class="form-control" @bind-Value="ManagedTeam.Phone" placeholder="Telefon komórkowy" />
                            <label class="text-center" for="Phone">Telefon komórkowy</label>
                            <ValidationMessage For="@(() => ManagedTeam.Phone)" class="text-danger" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText id="TeamDescription" class="form-control" @bind-Value="ManagedTeam.TeamDescription" placeholder="Opis drużyny" />
                            <label class="text-center" for="TeamDescription">Opis drużyny</label>
                            <ValidationMessage For="@(() => ManagedTeam.TeamDescription)" class="text-danger" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText id="Website" class="form-control" @bind-Value="ManagedTeam.Website" placeholder="Strona internetowa" />
                            <label class="text-center" for="Website">Strona internetowa</label>
                            <ValidationMessage For="@(() => ManagedTeam.Website)" class="text-danger" />
                        </div>

                        <div class="card-body" style="padding: 16px;">
                            <h2 style="margin-bottom: 25px;">Zawodnicy</h2>
                            <p class="text-danger">@ErrorMessage</p>
                            <table class="table table-responsive table-sm" style="width: 100%; border-collapse: collapse;">
                                <thead style="margin-bottom: 20px">
                                    <tr>
                                        <th class="text-center">Lp</th>
                                        <th class="text-center">Imię</th>
                                        <th class="text-center">Nazwisko</th>
                                        <th class="text-center">Numer</th>
                                        <th class="text-center">Pozycja</th>
                                        <th class="text-center">Płeć</th>
                                        <th class="text-center">Email</th>
                                        <th class="text-center">Usuń</th>
                                    </tr>
                                </thead>
                                <tbody>
                                @{
                                    int i = 0;
                                }
                                @foreach (var player in ManagedTeam.Players)
                                {
                                    <tr style="margin-top: 20px;">
                                        <td class="text-center">@(++i)</td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="player.FirstName" readonly />
                                            <ValidationMessage For="@(() => player.FirstName)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="player.LastName" readonly />
                                            <ValidationMessage For="@(() => player.LastName)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputNumber class="form-control text-center" style="max-width:55px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="player.JerseyNumber" />
                                            <ValidationMessage For="@(() => player.JerseyNumber)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputSelect class="form-control text-center" style="max-width:100px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px;  margin-left: auto; margin-right: auto;" @bind-Value="player.PositionId">
                                                @foreach (var position in Positions)
                                                {
                                                    <option value="@position.Id">@position.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => player.PositionId)" class="text-danger" />
                                        </td>
                                        <td style="margin-bottom: 8px;">
                                            <InputSelect class="form-control text-center" style="max-width:100px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px;" @bind-Value="player.Gender">
                                                <option value="false">M</option>
                                                <option value="true">K</option>
                                            </InputSelect>
                                            <ValidationMessage For="@(() => player.Gender)" class="text-danger" />
                                        </td>
                                        <td>
                                            @if (!player.IsRegisteredUser)
                                            {
                                                <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="player.Email" />
                                                <ValidationMessage For="@(() => player.Email)" class="text-danger" />
                                            }
                                        </td>
                                        <td>
                                            @if (player.Id != Team?.Captain.Id)
                                            {
                                                <button type="button" class="btn btn-danger" style="padding: 4px 8px; background-color: #dc3545; color: #fff; border: none;  margin-bottom: 8px;border-radius: 4px; margin-left: auto; margin-right: auto;" @onclick="@(() => RemovePlayer(player))">Usuń</button>
                                            }
                                        </td>
                                    </tr>
                                }
                                }
                                @foreach (var newPlayer in ManagedTeam.NewPlayers)
                                {
                                    <tr>
                                        <td>@(++i)</td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="newPlayer.FirstName" />
                                            <ValidationMessage For="@(() => newPlayer.FirstName)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="newPlayer.LastName" />
                                            <ValidationMessage For="@(() => newPlayer.LastName)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputNumber class="form-control text-center" style="max-width:55px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="newPlayer.JerseyNumber" />
                                            <ValidationMessage For="@(() => newPlayer.JerseyNumber)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputSelect class="form-control text-center" style="max-width:100px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px;  margin-left: auto; margin-right: auto;" @bind-Value="newPlayer.PositionId">
                                                @foreach (var position in Positions)
                                                {
                                                    <option value="@position.Id">@position.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => newPlayer.PositionId)" class="text-danger" />
                                        </td>
                                        <td style="margin-bottom: 8px;">
                                            <InputSelect class="form-control text-center" style="max-width:100px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px;" @bind-Value="newPlayer.Gender">
                                                <option value="false">M</option>
                                                <option value="true">K</option>
                                            </InputSelect>
                                            <ValidationMessage For="@(() => newPlayer.Gender)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="newPlayer.Email" />
                                            <ValidationMessage For="@(() => newPlayer.Email)" class="text-danger" />
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" style="padding: 4px 8px; background-color: #dc3545; color: #fff; border: none;  margin-bottom: 8px;border-radius: 4px; margin-left: auto; margin-right: auto;" @onclick="@(() => UndoAdd(newPlayer))">Usuń</button>
                                        </td>
                                    </tr>
                                }
                                @foreach (var removedPlayer in ManagedTeam.RemovedPlayers)
                                {
                                    <tr>
                                        <td>@(++i)</td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="removedPlayer.FirstName" readonly />
                                            <ValidationMessage For="@(() => removedPlayer.FirstName)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="removedPlayer.LastName" readonly />
                                            <ValidationMessage For="@(() => removedPlayer.LastName)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputNumber class="form-control text-center" style="max-width:55px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="removedPlayer.JerseyNumber" readonly />
                                            <ValidationMessage For="@(() => removedPlayer.JerseyNumber)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputSelect class="form-control text-center" style="max-width:100px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px;  margin-left: auto; margin-right: auto;" @bind-Value="removedPlayer.PositionId" readonly>
                                                @foreach (var position in Positions)
                                                {
                                                    <option value="@position.Id">@position.Name</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => removedPlayer.PositionId)" class="text-danger" />
                                        </td>
                                        <td style="margin-bottom: 8px;">
                                            <InputSelect class="form-control text-center" style="max-width:100px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px;" @bind-Value="removedPlayer.Gender" readonly>
                                                <option value="false">M</option>
                                                <option value="true">K</option>
                                            </InputSelect>
                                            <ValidationMessage For="@(() => removedPlayer.Gender)" class="text-danger" />
                                        </td>
                                        <td>
                                            <InputText class="form-control text-center" style="max-width:120px; padding: 4px; border: 1px solid #ced4da; border-radius: 4px; margin-bottom: 8px; margin-left: auto; margin-right: auto;" @bind-Value="removedPlayer.Email" readonly />
                                            <ValidationMessage For="@(() => removedPlayer.Email)" class="text-danger" />
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-danger" style="padding: 4px 8px; background-color: #dc3545; color: #fff; border: none;  margin-bottom: 8px;border-radius: 4px; margin-left: auto; margin-right: auto;" @onclick="@(() => UndoRemove(removedPlayer))">Przywróć</button>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                                <tr>
                                    <td colspan="8" style="text-align: center;">
                                        <button type="button" class="btn btn-success" style="padding: 8px 16px; background-color: #28a745; color: #fff; border: none; border-radius: 4px; margin-left: auto; margin-right: auto;" @onclick="AddPlayer">Dodaj zawodnika</button>
                                    </td>
                                </tr>
                            </table>
                        </div>

                        <div class="card-footer" style="padding: 16px; display: flex; justify-content: center;">
                            @if (IsLoading)
                            {
                                <LoadingIcon></LoadingIcon>
                            }
                            else
                            {
                                <button class="btn btn-primary" style="padding: 10px 20px; background-color: #007bff; color: #fff; border: none; border-radius: 4px;" type="submit">Wyślij</button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <EditForm Model="CaptainId" OnValidSubmit="UpdateCaptain">
                        <div class="d-flex flex-column">
                            <h4>Zmień kapitana</h4>
                            <p>Obecny kapitan: @(Team?.Captain.FirstName ?? "Unknown") @(Team?.Captain.LastName ?? "Unknown")</p>
                            <div class="form-floating mb-4">
                                <InputSelect id="CaptainId" class="form-control" @bind-Value="CaptainId">
                                    @foreach (var player in (ManagedTeam.Players?.Where(p => p.IsRegisteredUser && p.Id != ManagedTeam.Captain.Id) ?? Enumerable.Empty<TeamPlayerDto>()))
                                    {
                                        <option value="@player.Id">@player.FirstName @player.LastName</option>
                                    }
                                </InputSelect>
                                <label for="CaptainId">Nowy kapitan</label>
                                <ValidationMessage For="@(() => CaptainId)" class="text-danger" />
                            </div>
                            <div class="text-center">
                                <p class="text-primary">Uwaga: Zmieniając kapitana stracisz dostęp do zarządzania drużyną. Nowy kapitan musi posiadać własne konto.</p>
                                <button class="btn btn-primary" style="padding: 10px 20px; background-color: #007bff; color: #fff; border: none; border-radius: 4px;" type="submit" disabled="@(CaptainId == 0)">Aktualizuj</button>
                            </div>
                        </div>
                    </EditForm>
                </div>

                <div class="card-body text-center">
                    <button class="btn btn-danger" style="padding: 10px 20px; background-color: #dc3545; color: #fff; border: none; border-radius: 4px;" @onclick="ShowDeleteConfirmationModal">Usuń drużynę</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal for deletion confirmation -->
<div class="modal" tabindex="-1" role="dialog" style="@(ShowModal ? "display:block" : "display:none")">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Potwierdzenie usunięcia drużyny</h5>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz usunąć drużynę?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="HideDeleteConfirmationModal">Anuluj</button>
                <button class="btn btn-danger" @onclick="ConfirmDeleteTeam">Usuń</button>
            </div>
        </div>
    </div>
</div>

<style>
    #spinner {
        width: 40px;
        height: 40px;
        border: 5px solid #ccc;
        border-top: 5px solid #007bff;
        border-radius: 50%;
        margin: 50px auto;
        animation: spin 1s linear infinite;
    }

    .account-main {
        padding: 20px;
        background-color: #f9f9f9;
    }

    .section-title h2 {
        margin-bottom: 20px;
    }

    .login-form .card {
        margin-bottom: 20px;
    }

    .login-form .card-body {
        padding: 30px;
    }

    .form {
        margin-bottom: 15px;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .text-center {
        text-align: center;
    }

    .form-label {
        display: block;
        width: 100%;
    }
</style>

@code {
    ManageTeamListsDto ManagedTeam { get; set; } = new ManageTeamListsDto();
    List<PositionDto> Positions { get; set; } = new List<PositionDto>();
    ManagedTeamDataDto? Team { get; set; } = new ManagedTeamDataDto();
    int CaptainId { get; set; }
    int transfers = 0;

    bool IsLoadingCaptain { get; set; } = false;
    string ErrorMessageCaptain { get; set; } = "";
    bool IsLoading { get; set; } = false;
    bool ShowErrorMessage { get; set; } = false;
    bool DeleteErrorMessageFlag { get; set; } = false;
    string ErrorMessage { get; set; } = "";
    bool PageReady { get; set; } = false;
    bool ShowModal { get; set; } = false;
    bool IsDeleting { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var teamResult = await teamService.GetManagedTeam();
        var userHasTeam = await userService.IsTeamCaptain();

        if (!userHasTeam)
        {
            ShowErrorMessage = true;
            ErrorMessage = "Nie masz drużyny.";
            return;
        }

        var positionsResult = await userService.GetPositions();
        Positions = positionsResult;

        Team = teamResult;
        ManagedTeam = new ManageTeamListsDto((ManageTeamDto)Team);

        ManagedTeam.Players = ManagedTeam.Players ?? new List<TeamPlayerDto>();
        ManagedTeam.NewPlayers = ManagedTeam.NewPlayers ?? new List<TeamPlayerDto>();
        ManagedTeam.RemovedPlayers = ManagedTeam.RemovedPlayers ?? new List<TeamPlayerDto>();

        PageReady = true;
    }

    public void AddPlayer()
    {
        ManagedTeam.NewPlayers.Add(new TeamPlayerDto() { Id = 0 });
        transfers++;
    }

    public void RemovePlayer(TeamPlayerDto player)
    {
        if (ManagedTeam.Players.Count + ManagedTeam.NewPlayers.Count - ManagedTeam.RemovedPlayers.Count <= 6)
        {
            ShowErrorMessage = true;
            ErrorMessage = "Nie można mieć mniej niż 6 zawodników.";
            return;
        }
        if (player.Id == Team?.Captain.Id)
        {
            ShowErrorMessage = true;
            ErrorMessage = "Nie można usunąć kapitana.";
            return;
        }
        ManagedTeam.Players.Remove(player);
        ManagedTeam.RemovedPlayers.Add(player);
        transfers++;
    }

    public void UndoAdd(TeamPlayerDto player)
    {
        ManagedTeam.NewPlayers.Remove(player);
        transfers--;
    }

    public void UndoRemove(TeamPlayerDto player)
    {
        ManagedTeam.RemovedPlayers.Remove(player);
        ManagedTeam.Players.Add(player);
        transfers--;
    }

    public async Task HandleValidSubmit()
    {
        if (!IsDeleting)
        {
            if (!ValidateTeam(out var validationError))
            {
                ShowErrorMessage = true;
                ErrorMessage = validationError;
                return;
            }

            IsLoading = true;
            var response = await teamService.UpdateTeam(ManagedTeam);
            IsLoading = false;
            if (response.Success)
            {
                navigationManager.NavigateTo("/ManageTeam", forceLoad: true);
            }
            else
            {
                ShowErrorMessage = true;
                ErrorMessage = response.Message; // Pokaż komunikat zwrócony z backendu
                StateHasChanged();
            }
        }
    }

    public async Task UpdateCaptain()
    {
        IsLoadingCaptain = true;
        var response = await teamService.UpdateCaptain(CaptainId);
        IsLoadingCaptain = false;
        if (response)
        {
            navigationManager.NavigateTo($"team/{Team?.Id}", forceLoad: true);
        }
        else
        {
            ErrorMessageCaptain = "Błąd w trakcie aktualizacji kapitana.";
            StateHasChanged();
        }
    }

    public void ShowDeleteConfirmationModal()
    {
        ShowModal = true;
        ShowErrorMessage = false;
        ErrorMessage = "";
        IsDeleting = true;
    }

    public void HideDeleteConfirmationModal()
    {
        ShowModal = false;
    }

    public async Task ConfirmDeleteTeam()
    {
        PageReady = false;
        ShowModal = false;
        IsLoading = true;
        ShowErrorMessage = false;
        ErrorMessage = "";
        var response = await teamService.DeleteTeam(Team.Id);
        IsLoading = false;
        if (response)
        {
            await JSRuntime.InvokeVoidAsync("location.assign", "/");
        }
        else
        {
            ShowErrorMessage = true;
            ErrorMessage = "Wystąpił błąd podczas usuwania drużyny.";
            StateHasChanged();
        }
    }

    private bool ValidateTeam(out string validationError)
    {
        validationError = string.Empty;

        if (ManagedTeam.Players.Count + ManagedTeam.NewPlayers.Count - ManagedTeam.RemovedPlayers.Count < 6)
        {
            validationError = "Musi być co najmniej 6 zawodników (kapitana nie można usunąć).";
            return false;
        }

        foreach (var player in ManagedTeam.NewPlayers)
        {
            if (string.IsNullOrEmpty(player.FirstName) || string.IsNullOrEmpty(player.LastName) || player.PositionId == 0 || string.IsNullOrEmpty(player.Email))
            {
                validationError = "Nowi zawodnicy muszą mieć imię, nazwisko, pozycję oraz adres email.";
                return false;
            }
        }

        return true;
    }
}
