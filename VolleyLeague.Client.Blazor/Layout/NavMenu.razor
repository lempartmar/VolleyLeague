@using VolleyLeague.Client.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Client.Blazor.Authentication
@using VolleyLeague.Client.Blazor.Shared.Dtos
@using static VolleyLeague.Client.Blazor.Services.AccountService
@using System.Net.Http.Headers
@using System.Globalization
@using VolleyLeague.Shared.Dtos.Teams
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUserService userService
@inject ITeamService teamService

<header id="rtsHeader" class="rts-header3 rts-header7">
        <div class="navbar-sticky">
            <div class="inline-wrapper d-flex">
                <div class="navbar-wrapper">
                    <div class="navbar-part navbar-part3 navbar-upper d-flex">
                        <div class="container">
                            <div class="navbar-inner">
                                <a href="index.html" class="logo"><img src="assets/images/logo9.png" alt="sportius-logo"></a>
                                <div class="rts-menu">
                                    <nav class="menus menu-toggle">
                                        <ul class="nav__menu">
                                        <li class="has-dropdown">
                                            <NavLink class="menu-item active1" href="/">Home</NavLink>
                                            </li>
                                        <li class="has-dropdown">
                                            <NavLink class="menu-item" href="#">Wyniki</NavLink>
                                            <ul class="dropdown-ul">
                                                <li class="dropdown-li">
                                                    <NavLink class="dropdown-link" href="/standings">Tabele</NavLink>
                                                </li>
                                                <li class="dropdown-li">
                                                    <NavLink class="dropdown-link" href="/mvp">MVP</NavLink>
                                                </li>
                                                <li class="dropdown-li">
                                                    <NavLink class="dropdown-link" href="/typedResults">Typermania</NavLink>
                                                </li>
                                            </ul>
                                        </li>
                                        <li class="has-dropdown">
                                            <NavLink class="menu-item active1" href="/schedule">Terminarz</NavLink>
                                        </li>
                                        <li class="has-dropdown">
                                            <NavLink class="menu-item active1" href="/teams-list">Zespoły</NavLink>
                                        </li>
                                        <li class="has-dropdown">
                                            <NavLink class="menu-item active1" href="/policy">Liga</NavLink>
                                        </li>
                                        <li class="has-dropdown">
                                            <NavLink class="menu-item active1" href="/contact">Kontakt</NavLink>
                                        </li>
                                           
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    </header>

<style>
    .nav-item.nav-user {
        color: #7d7d7d;
        text-decoration: none;
        font-size: 9px;
    }
</style>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool HasTeam { get; set; } = false;
    PlayerSummaryDto playerSummary = new PlayerSummaryDto();
    private bool IsPlayer { get; set; }
    private bool IsAdmin { get; set; }


    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Console.WriteLine(user);

        if (user.Identity.IsAuthenticated)
        {

            IsPlayer = user.IsInRole("Player");
            IsAdmin = user.IsInRole("Admin");

            Console.WriteLine($"User: {user.Identity.Name}");
            var roles = user.FindAll("http://schemas.microsoft.com/ws/2008/06/identity/claims/role").Select(c => c.Value);
            foreach (var role in roles)
            {
                Console.WriteLine($"Role: {role}");
            }
            playerSummary = await userService.GetUserSummary();
            HasTeam = await userService.IsTeamCaptain();
        }
    }

    public async void Logout()
    {
        await localStorage.RemoveItemAsync("token");
        ((CustomAuthenticationStateProvider)authStateProvider).NotifyUserLogout();
        NavigationManager.NavigateTo("/");
    }

    private string GetDayName(DateTime date)
    {
        return date.ToString("dddd", new CultureInfo("pl-PL"));
    }

    private string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd MMMM yyyy", new CultureInfo("pl-PL"));
    }
}
