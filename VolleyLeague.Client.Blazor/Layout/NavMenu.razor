@using VolleyLeague.Client.Blazor.Pages
@using VolleyLeague.Client.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using VolleyLeague.Client.Blazor.Authentication
@using VolleyLeague.Client.Blazor.Shared.Dtos
@using static VolleyLeague.Client.Blazor.Services.AccountService
@using System.Net.Http.Headers
@using System.Globalization
@using VolleyLeague.Shared.Dtos.Teams
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUserService userService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ITeamService teamService
@inject IAdminDefinedCodeService adminDefinedCodeService

@inherits LayoutComponentBase

@if (isLoading)
{
    <Preloader />

}else {
<header id="rtsHeader" class="rts-header1 header-four cricket">
    <div class="navbar-sticky"></div>
    <div class="navbar-part navbar-part1">
        <div class="container main">
            <div class="top-bar">
                <div class="top-bar-inner">
                    <div class="top-bar-left">
                        <a href="#" class="get-ticket-btn">MEDIA SPOŁECZNOŚCIOWE</a>
                        <ul class="social-wrapper">
                            <li><a href="https://www.youtube.com/@@BialoleckaLigaSiatkowki/videos"><i class="fab fa-youtube"></i></a></li>
                        </ul>
                    </div>
                    <div class="top-bar-mid">
                        <span class="tag">AKTUALNY SEZON</span>
                        <div class="live-match">@currentSeason</div>
                    </div>
                    <AuthorizeView>
                        <NotAuthorized>
                            <div class="top-bar-right">
                                    <NavLink href="/login" class="main-page-button">ZALOGUJ</NavLink>
                                    <NavLink href="/register" class="main-page-button">REJESTRACJA</NavLink>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                    <AuthorizeView>
                        <Authorized>
                            <div class="top-bar-right">
                                <NavLink class="menu-item text-label" href="/account">PANEL ADMINISTRACYJNY</NavLink>
                                <a class="sign-up-btn">|</a>
                                <button @onclick="Logout" class="main-page-button">WYLOGUJ</button>
                            </div>

                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
            <div class="navbar-inner">
                <a href="/" class="logo"><img src="/assets/images/logo-new.png" alt="sportius-logo"></a>
                <a href="/" class="logo-sticky">
                    <img src="/assets/images/logo-new.png" alt="liga-siatkowki-logo">
                </a>
                <div class="rts-menu">
                    <nav class="menus menu-toggle">
                        <ul class="nav__menu">
                            <li class="has-dropdown">
                                <NavLink class="menu-item active1" href="/">Home</NavLink>
                            </li>
                            <li class="has-dropdown">
                                <NavLink class="menu-item" href="#">Wyniki</NavLink>
                                <ul class="dropdown-ul">
                                    <li class="dropdown-li">
                                        <NavLink class="dropdown-link" href="/standings">Tabele</NavLink>
                                    </li>
                                    <li class="dropdown-li">
                                        <NavLink class="dropdown-link" href="/mvp">MVP</NavLink>
                                    </li>
                                    <li class="dropdown-li">
                                        <NavLink class="dropdown-link" href="/typedResults">Typermania</NavLink>
                                    </li>
                                </ul>
                            </li>
                            <li class="has-dropdown">
                                <NavLink class="menu-item" href="/schedule">Terminarz</NavLink>
                            </li>
                            <li class="has-dropdown">
                                <NavLink class="menu-item" href="/teams-list">Zespoły</NavLink>
                            </li>
                            <li class="has-dropdown">
                                <NavLink class="menu-item" href="/policy">Liga</NavLink>
                            </li>
                            <li class="has-dropdown">
                                <NavLink class="menu-item" href="/contact">Kontakt</NavLink>
                            </li>
                        </ul>
                    </nav>
                </div>

                <div class="header-action-items header-action-items1">
                    <div class="search-part">
                        <div class="search-icon action-item icon"><i class="rt-search"></i></div>
                        <div class="search-input-area">
                            <div class="container">
                                <div class="search-input-inner">
                                    <div class="input-div">
                                        <div class="search-input-icon"><i class="rt-search mr--10"></i></div>
                                        <input @bind="searchTerm" id="searchInput1" class="search-input" type="text" placeholder="Wyszukaj artykuł wg hasła" @onkeydown="HandleKeyDown">
                                    </div>
                                    <div class="search-close-icon"><i class="rt-xmark"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <NavLink id="hiddenNavLink" href="@GetSearchUrl()" class="d-none"></NavLink>
                <a class="hamburger-menu aitem d-block display-menu" @onclick="ToggleMenu">
                    <div class="hamburger-menu-inner">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </a>
            </div>
        </div>
    </div>
    <div class="banner banner1 volleyball @(IsHomePage ? "" : "display_none")">
        <div class="swiper bannerSlide2">
            <div class="swiper-wrapper">
                <div class="swiper-slide">
                    <div class="banner-single banner-single-1 banner-bg">
                        <div class="container">
                            <div class="banner-content">
                                <h1 class="banner-heading">LIGASIATKOWKI.pl</h1>
                                <p class="desc">Największe amatorskie rozgrywki siatkarskie w Polsce. Dołącz do nas!</p>
                                <div class="form">
                                    <button @onclick="NavigateToRegister" class="btn" style="margin-top: 20px">
                                        Dołącz do nas <i class=""></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="swiper-slide">
                    <div class="banner-single banner-single-1_2 banner-bg">
                        <div class="container">
                            <div class="banner-content">
                                <h1 class="banner-heading">LIGASIATKOWKI.PL</h1>
                                <p class="desc">Gramy od 2012 roku! Dołącz do Nas!</p>
                                <div class="form">
                                    <button @onclick="NavigateToRegister" class="btn" style="margin-top: 20px">
                                        Dołącz do nas <i class=""></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="banner banner1 @(IsHomePage ? "display_none" : "")">
        <div class="banner banner1">
            <div class="inner-page-banner banner-bg">
                <div class="container">
                    <div class="banner-content">
                        <div class="page-path">
                            <ul>
                                <li><a class="home-page-link" href="/">Strona Główna</a></li>
                            </ul>
                        </div>
                        <h1 class="banner-heading-top">@GetPageTitle()</h1>
                    </div>
                </div>
            </div>
        </div>
    </div>
</header>


    <aside class="slide-bar @(menuClass)">
        <div class="offset-sidebar">
            <button class="slide-bar-close ml--30" @onclick="ToggleMenu"><i class="fal fa-times"></i></button>
            <div class="offset-widget offset-logo mb-30">
                <a href="/">
                    <img src="/assets/images/logo-new.png" alt="logo">
                </a>
            </div>
        </div>
        <nav class="side-mobile-menu side-mobile-menu1">
            <ul id="mobile-menu-active">
                <li class="has-dropdown firstlvl">
                    <NavLink class="mm-link" href="/" @onclick="CloseMobileMenu">Home</NavLink>
                </li>
                <li class="has-dropdown firstlvl">
                    <NavLink class="mm-link" href="/standings" @onclick="CloseMobileMenu">Wyniki <i class="rt-angle-down"></i></NavLink>
                    <ul class="sub-menu">
                        <li><NavLink class="dropdown-link" href="/standings" @onclick="CloseMobileMenu">Tabele</NavLink></li>
                        <li><NavLink class="dropdown-link" href="/mvp" @onclick="CloseMobileMenu">MVP</NavLink></li>
                        <li><NavLink class="dropdown-link" href="/typedResults" @onclick="CloseMobileMenu">Typermania</NavLink></li>
                    </ul>
                </li>
                <li class="has-dropdown firstlvl">
                    <NavLink class="mm-link" href="/schedule" @onclick="CloseMobileMenu">Terminarz</NavLink>
                </li>
                <li class="has-dropdown firstlvl">
                    <NavLink class="mm-link" href="/teams-list" @onclick="CloseMobileMenu">Zespoły</NavLink>
                </li>
                <li class="has-dropdown firstlvl">
                    <NavLink class="mm-link" href="/policy" @onclick="CloseMobileMenu">Liga</NavLink>
                </li>
                <li class="has-dropdown firstlvl">
                    <NavLink class="mm-link" href="/contact" @onclick="CloseMobileMenu">Kontakt</NavLink>
                </li>
                <li class="has-dropdown firstlvl" style="text-align: center; border-top: 1px solid white;">
                    <NavLink class="mm-link" href="/login" @onclick="CloseMobileMenu" style="display: block; text-align: center;">LOGOWANIE</NavLink>
                </li>
                <li class="has-dropdown firstlvl" style="text-align: center;">
                    <NavLink class="mm-link" href="/register" @onclick="CloseMobileMenu" style="display: block; text-align: center;">REJESTRACJA</NavLink>
                </li>
            </ul>
        </nav>
    </aside>


}

<script>
    function clickHiddenNavLink() {
        var hiddenNavLink = document.getElementById("hiddenNavLink");
        if (hiddenNavLink) {
            hiddenNavLink.click();
        }
    }

    window.initializeSwiper = () => {
        const swiper = new Swiper('.swiper.bannerSlide2', {
            loop: true,
            pagination: {
                el: '.swiper-pagination',
                clickable: true,
            },
            navigation: {
                nextEl: '.swiper-button-next',
                prevEl: '.swiper-button-prev',
            },
            autoplay: {
                delay: 5000,
                disableOnInteraction: false,
            },
            speed: 1500,
            on: {
                slideChangeTransitionStart: function () {
                    const activeSlide = this.slides[this.activeIndex];
                    const textElements = activeSlide.querySelectorAll('.animated-element');
                    textElements.forEach(el => {
                        el.classList.remove('show');
                    });
                },
                slideChangeTransitionEnd: function () {
                    const activeSlide = this.slides[this.activeIndex];
                    const textElements = activeSlide.querySelectorAll('.animated-element');
                    setTimeout(() => {
                        textElements.forEach(el => {
                            el.classList.add('show');
                        });
                    }, 3000);
                }
            }
        });
    };
</script>

@code {
    private string currentPath;
    private string pageTitle;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool HasTeam { get; set; } = false;
    PlayerSummaryDto playerSummary = new PlayerSummaryDto();
    private bool IsPlayer { get; set; }
    private bool IsAdmin { get; set; }
    private bool IsHomePage => NavigationManager.Uri.TrimEnd('/') == NavigationManager.BaseUri.TrimEnd('/');

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private string previousUri;
    private string currentSeason = "Ładowanie...";
    private string searchTerm;
    private string selectedCategory;
    private string menuClass = string.Empty;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("loadCssFile", "/assets/css/custom-navmenu.css");
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleMenu()
    {
        menuClass = menuClass == string.Empty ? "show" : string.Empty;
    }

    private void CloseMobileMenu()
    {
        menuClass = string.Empty;
    }


    protected override async Task OnInitializedAsync()
    {
        currentSeason = await adminDefinedCodeService.GetValueByKey("current-season-for-main-page");
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            IsPlayer = user.IsInRole("Player");
            IsAdmin = user.IsInRole("Admin");

            playerSummary = await userService.GetUserSummary();
            HasTeam = await userService.IsTeamCaptain();
        }

        previousUri = NavigationManager.Uri;
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        var currentUri = NavigationManager.Uri;
        UpdatePageInfo();
        StateHasChanged();

        if (IsNavigatingToOrFromHomePage(currentUri, previousUri))
        {
            StateHasChanged();
        }

        previousUri = currentUri;
    }

    private void UpdatePageInfo()
    {
        currentPath = NavigationManager.Uri.Replace(NavigationManager.BaseUri, "");
        pageTitle = GetPageTitle();
    }

    private string GetPageTitle()
    {
        if (string.IsNullOrEmpty(currentPath))
        {
            return "STRONA GŁÓWNA";
        }

        if (currentPath.StartsWith("article"))
        {
            return "ARTYKUŁ";
        }

        return currentPath switch
        {
            _ when currentPath.StartsWith("account") => "PANEL ADMINISTRACYJNY",
            _ when currentPath.StartsWith("team-result") => "WYNIKI ZESPOŁU",
            _ when currentPath.StartsWith("team") => "SZCZEGÓŁY ZESPOŁU",
            _ when currentPath.StartsWith("managematch") => "ZARZĄDZAJ WYNIKIEM MECZU",
            "standings" => "TABELA",
            "mvp" => "MVP",
            "typedResults" => "TYPERMANIA",
            "schedule" => "TERMINARZ",
            "teams-list" => "ZESPOŁY",
            "policy" => "LIGA",
            "contact" => "KONTAKT",
            "login" => "LOGOWANIE DO PORTALU",
            "register" => "REJESTRACJA UŻYTKOWNIKA",
            _ => "STRONA",
        };
    }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await NavigateToSearchResults1(searchTerm);
        }
    }

    private async Task NavigateToSearchResults1(string searchTerm)
    {
        await JS.InvokeVoidAsync("sessionStorage.setItem", "searchTerm", searchTerm);
        await Task.Delay(100);
        Console.WriteLine("Działa");
        Console.WriteLine(searchTerm);
        await JS.InvokeVoidAsync("clickHiddenNavLink");
    }

    private string GetSearchUrl()
    {
        return string.IsNullOrWhiteSpace(selectedCategory) || selectedCategory == "hide" || selectedCategory == "all"
            ? $"/articlesByContent/{searchTerm}"
            : $"/articlesByContent/{searchTerm}?category={selectedCategory}";
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private bool IsNavigatingToOrFromHomePage(string currentUri, string previousUri)
    {
        bool isCurrentHomePage = currentUri.TrimEnd('/') == NavigationManager.BaseUri.TrimEnd('/');
        bool isPreviousHomePage = previousUri.TrimEnd('/') == NavigationManager.BaseUri.TrimEnd('/');

        return isCurrentHomePage || isPreviousHomePage;
    }

    public async Task Logout()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            await ((CustomAuthenticationStateProvider)authStateProvider).NotifyUserLogout();

            await localStorage.RemoveItemAsync("token");

            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetDayName(DateTime date)
    {
        return date.ToString("dddd", new CultureInfo("pl-PL"));
    }

    private string GetFormattedDate(DateTime date)
    {
        return date.ToString("dd MMMM yyyy", new CultureInfo("pl-PL"));
    }

    private void NavigateToAccount()
    {
        NavigationManager.NavigateTo("/account");
    }

    private bool showAdminPanel = false;

    private void ToggleAdminPanel()
    {
        showAdminPanel = !showAdminPanel;
    }

    private void NavigateToAdminPanel()
    {
        NavigationManager.NavigateTo("/account");
    }
}
